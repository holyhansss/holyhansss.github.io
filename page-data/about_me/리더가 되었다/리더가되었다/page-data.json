{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/about_me/리더가 되었다/리더가되었다/",
    "result": {"data":{"cur":{"id":"ed330f30-16d5-5eec-857d-abe68eebdb83","html":"<h1 id=\"-졸업-프로젝트의-리더가-되었다\" style=\"position:relative;\"><a href=\"#-%EC%A1%B8%EC%97%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EB%A6%AC%EB%8D%94%EA%B0%80-%EB%90%98%EC%97%88%EB%8B%A4\" aria-label=\" 졸업 프로젝트의 리더가 되었다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 졸업 프로젝트의 리더가 되었다.</h1>\n<p>이번 글에서는 우리 졸업 프로젝트에 리더가 필요했던 이유와 리더가 된 내가 드는 고민 및 생각을 써내려 갈 것이다.</p>\n<p>팀의 리더가 생기면서 팀의 효율성이 좋아졌다고 느낀다. 요즘 많은 기업들에서도 수평적인 문화를 만들어 나가려고 노력한다.\n하지만 수평적인 관계라도 누군가는 리더로써 이끌어 나가고 있다. 우리 팀은 수평이라는 키워드에만 너무 몰입해 효율성을 떨어뜨리고 있었다.\n이번에 리더의 필요성을 느끼면서 리더라는 사람에 대한 이해가 깊어진 것 같다. 앞으로 내가 리더로써의 역할을 수행하면서 더 많은 것을 배울 것이라고 생각한다.</p>\n<p>아래 글은 내가 리더가 된 과정을 그저 일기처럼 담았다. 이번 글에서는 과정을 담았고 나중 글에서는 리더가 된 후의 나의 마음가짐에 대해서 다룰 것이다.</p>\n<h3 id=\"졸업-프로젝트-팀에-대해-그리고-리더가-되다\" style=\"position:relative;\"><a href=\"#%EC%A1%B8%EC%97%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8C%80%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%A6%AC%EB%8D%94%EA%B0%80-%EB%90%98%EB%8B%A4\" aria-label=\"졸업 프로젝트 팀에 대해 그리고 리더가 되다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>졸업 프로젝트 팀에 대해, 그리고 리더가 되다.</h3>\n<p>졸업을 1년정도 앞두고 있는 지금, 나는 캡스톤 프로젝트를 시작하게 되었다.\n작년 말 6명의 팀원들을 만났고, 1월과 2월동안 주제를 선장하고 조사하고 갈아엎고를 복하며 캡스톤 시작을 준비했다.</p>\n<p>우리 팀은 모두 열정적이었고, 자기 할일도 열심이었다. 여러 팀플로 고생했던 나는 기분이 좋았다. 드디어 나도 재밌게 팀플을 할 수 있겠구나라는 생각도 했다.\n하지만 너무 열정적이어서 였을까? 의견 조율에 너무 많은 시간을 쏟았다. 우리는 한명의 생각을 7명 모두가 동의해야 다음 안건으로 넘어갈 수 있었다.\n이는 1시간 예정이었던 회의는 2시간, 3시간까지 이어지게까지 했다.</p>\n<p>우리 팀은 그렇게 많은 시간을 소비하며 2달동안 프로젝트 준비를 진행했다.\n2달이 지난 시점에서 팀원 모두들 이 부분대한 해결책이 필요하다고 생각했고, 마침내 <strong>리더</strong> 를 뽑자는 얘기가 나왔다. 그리고 우리가 정의한 리더의 역할은 다음과 같았다.</p>\n<ol>\n<li>의견이 나눠져 진전이 없을때 논리적으로 이유를 설명하고 결정 할 수 있다.</li>\n<li>전체 회의를 진행하고 개발자와 기획자의 의견을 조율하는 것(총 책임자)</li>\n</ol>\n<p>나는 아이디어 뱅크 2명을 제외하고, 2명의 사람을 추천했다. 우선 아이디어 뱅크를 2명을 제외한 이유는 그 둘의 의견 충돌이 가장 많았기 때문이다.\n그래서 그 둘 이외에 가장 나이 많은 2명을 추천했다. 내가 추천한 둘은 나이만 많았던 것이 아니라 항상 모두가 이야기하는 것을 다 듣고 나서야 자신들의 이야기를 했기 때문이다. 나는 그들이 들을 준비가 되어있는 사람이다 라고 생각했고 실제로도 그랬다. 하지만 그 둘은 리더의 역할 1번에 해당하는 의사결정을 잘 못한다는 이유로 거절했다.</p>\n<p>그 둘의 이유를 들은 후 누군가 나를 추천했다. 나는 추천됐을 당시 약간 놀랐다. 팀원 7명중 내가 2번째로 어렸고 가장 나이 많은 분과를 5살 차이가 났다. 그리고 나의 안중은 <strong>블록체인</strong> 에 가있었기 때문에 다른 사람들보다 프로젝트에 집중하고 못하고 있었다.</p>\n<p>하지만 위 이유는 리더로서의 역할을 수행하는데 문제가 되지 않았고, 나는 <strong>리더</strong> 가 되기로 결정했다.</p>\n<!-- ### 리더가 된 후의 나\n리더가 된 후 나는 내가 어떻게 이끌어가느냐에 따라 1년안의 성과가 달라질 것이라고 생각한다. 나는 이번 기회가 나를 더 성장 시킬 것이라고 확신한다. 내가 리더로써 가장 중요하게 생각하는 것은 3가지이다.\n\n1. 사람 관리\n2. 시간 관리\n3. 생산성 관리\n\n우리는 팀원이 7명이기 떄문에 의견 충돌이 적지 않을 것으로 예상된다. 내가 리더로써 이들을 잘 설득하기 위해서는 논리력도 필요하지만 그들과 친한 것이 더 중요하다고 생각한다. \n -->\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%A1%B8%EC%97%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%8C%80%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EB%A6%AC%EB%8D%94%EA%B0%80-%EB%90%98%EB%8B%A4\">졸업 프로젝트 팀에 대해, 그리고 리더가 되다.</a></li>\n</ul>\n</div>","excerpt":"👋 졸업 프로젝트의 리더가 되었다. 이번 글에서는 우리 졸업 프로젝트에 리더가 필요했던 이유와 리더가 된 내가 드는 고민 및 생각을 써내려 갈 것이다. 팀의 리더가 생기면서 팀의 효율성이 좋아졌다고 느낀다. 요즘 많은 기업들에서도 수평적인 문화를 만들어 나가려고 노력한다.\n하지만 수평적인 관계라도 누군가는 리더로써 이끌어 나가고 있다. 우리 팀은 수평이라는 키워드에만 너무 몰입해 효율성을 떨어뜨리고 있었다.\n이번에 리더의 필요성을 느끼면서 리더라는 사람에 대한 이해가 깊어진 것 같다. 앞으로 내가 리더로써의 역할을 수행하면서 더 많은 것을 배울 것이라고 생각한다. 아래 글은 내가 리더가 된 과정을 그저 일기처럼 담았다. 이번 글에서는 과정을 담았고 나중 글에서는 리더가 된 후의 나의 마음가짐에 대해서 다룰 것이다. 졸업 프로젝트 팀에 대해, 그리고 리더가 되다. 졸업을 1년정도 앞두고 있는 지금, 나는 캡스톤 프로젝트를 시작하게 되었다.\n작년 말 6명의 팀원들을 만났고, 1월과 2…","frontmatter":{"date":"March 05, 2022","title":"리더가 되었다.","categories":"나","author":"한성원","emoji":"🧢"},"fields":{"slug":"/about_me/리더가 되었다/리더가되었다/"}},"next":{"id":"ab3111c4-c20f-5e43-9e88-e6646a7d2d94","html":"<h1 id=\"-solidity-storage-layout-for-proxy-contracts-and-diamonds\" style=\"position:relative;\"><a href=\"#-solidity-storage-layout-for-proxy-contracts-and-diamonds\" aria-label=\" solidity storage layout for proxy contracts and diamonds permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Solidity Storage Layout For Proxy Contracts and Diamonds</h1>\n<p>이 글은 내가 공부하면서 찾은 <a href=\"https://medium.com/1milliondevs/solidity-storage-layout-for-proxy-contracts-and-diamonds-c4f009b6903\">이 글</a>을 변역하였다. 이 글은 Ethernaut의 24번 Puzzle Wallet을 풀때 공부했던 것을 봤다. 이 글을 읽기 위해서는 proxy contract에 대한 사전지식이 필요하다. 또한 이 글은 Diamond standard의 저자인 NickMudge의 글이며, Proxy contract의 Storage Layout과 Diamond standard에 대해서 다룬다. 글에는 내가 생각하는 부분이 포함되어있을 수도 있기 때문에, 내 글이 이해가 잘 되지 않는다면 <a href=\"https://medium.com/1milliondevs/solidity-storage-layout-for-proxy-contracts-and-diamonds-c4f009b6903\">원문</a>을 읽어보는 것을 추천한다.</p>\n<h3 id=\"시작\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91\" aria-label=\"시작 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작</h3>\n<p><code class=\"language-text\">Storage Layout</code>은 contract의 상태 변수가 <code class=\"language-text\">contract storage</code>에 저장되는 방법과 저장되는 위치이다.</p>\n<p><code class=\"language-text\">Storage Layout</code>은 우리가 평상시에 contract를 작성할 때는 고려하지 않아도 괜찮다. 왜냐하면 Solidity compiler가 알아서 처리해주기 때문이다.</p>\n<p>하지만 <code class=\"language-text\">Proxy contract</code> 또는 <code class=\"language-text\">Diamond</code>를 작성할때는 <code class=\"language-text\">Storage layout</code>을 고려하면 contract를 작성해야한다.</p>\n<p>이유를 설명하기 전에 contract storage와 상태변수 Layout에 대해서 먼저 이야기 해보자.1</p>\n<ol>\n<li>상태변수의 <code class=\"language-text\">Storage Layout</code>은 Slot 0에서 시작하며 새로운 상태변수마다 증가한다. Ex) 첫번째 상태변수는 Slot 0, 두번째는 Slot 1… (optimize 제외)</li>\n<li>struct와 array도 지정된 만큼에 공간을 차지하여 storage에 저장된다.</li>\n<li>동적 array와 mapping은 동적으로 크기가 변하기 때문에 storage위치와 key의 hash 값을 기반으로 하는 위치에 저장된다.</li>\n</ol>\n<p>Storage Layout의 작동 방식에 대한 설명은 <a href=\"https://solidity.readthedocs.io/en/v0.6.3/miscellaneous.html\">Solidity docs</a>에 잘 나와있다!</p>\n<p>즉 Storage Layout은 Slot 0에서 시작하여 새로운 상태변수가 올때마다 증가한다는 것을 알 수 있다.</p>\n<h3 id=\"problem\" style=\"position:relative;\"><a href=\"#problem\" aria-label=\"problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제는 Proxy contract와 logic contract가 같은 storage layout을 공유한다는 것이다.</code></pre></div>\n<p>다음 코드는 문제에 대해 설명하기 위한 예시이다.</p>\n<p>ProxyA는 2개의 상태변수를 정의한다, facetA와 owner.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">ProxyA</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> facetA<span class=\"token punctuation\">;</span>  \n    <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        facetA <span class=\"token operator\">=</span> <span class=\"token number\">0x0b22380B7c423470979AC3eD7d3c07696773dEa1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">address</span> facetAddress <span class=\"token operator\">=</span> facetA<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> code omitted <span class=\"token keyword\">for</span> simplicity\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>FacetA는 하나의 상태변수를 정의한다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">FacetA</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newUser<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">{</span>\n        user <span class=\"token operator\">=</span> newUser<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>ProxyA contract는 FacetA에게 함수 호출을 위임(delegate)한다. 이때 문제는 위임시에 ProxyA와 FacetA는 <code class=\"language-text\">storage layout</code>을 공유한다는 것이다. ProxyA의 상태변수 <code class=\"language-text\">facet</code>는 slot 0에 위치한다. 또한 FacetA의 상태변수 <code class=\"language-text\">user</code>도 slot 0에 위치한다. 우리는 setUser를 통해 user만 바뀌는 것을 의도했지만, 만약 <code class=\"language-text\">setUser(address newUser)</code>가 호출된다면 <code class=\"language-text\">user</code>와 <code class=\"language-text\">facetA</code>가 모두 <code class=\"language-text\">newUser</code>로 바뀔 것이다.</p>\n<p>사람들은 이와 같은 문제를 해결하기위해 다양한 패턴을 만들었고 이제부터 그 패턴들에 대해서 설명해보겠다.</p>\n<h3 id=\"unstructured-storage\" style=\"position:relative;\"><a href=\"#unstructured-storage\" aria-label=\"unstructured storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unstructured Storage</h3>\n<p>Solidity의 storage는 <code class=\"language-text\">assembly</code>를 통해서 contract storage에 임의로 위치를 정해 value를 저장할 수 있다. 이 패턴은 <code class=\"language-text\">Unstructured Storage Pattern</code>이다. 이 패턴의 예시를 함께 보자</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">ProxyA</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">bytes32</span> position <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span>\n            owner <span class=\"token operator\">:=</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setOwner</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">bytes32</span> position <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getFacet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> facet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">bytes32</span> position <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FacetA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span>\n            facet <span class=\"token operator\">:=</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setFacet</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> facet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">bytes32</span> position <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FacetA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> facet<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>위 예시에서는 <code class=\"language-text\">get</code>과 <code class=\"language-text\">set</code> 함수를 이용해 <code class=\"language-text\">owner</code>와 <code class=\"language-text\">facetA</code>을 storage에 저장하고 가져올 수 있다. 우리는 상태변수가 저장되는 장소를 <code class=\"language-text\">assembly</code>를 사용해 지정함으로써 다른 storage 변수와 충돌되지 않도록 한 것이다. 충돌하지 않는다는 장점도 있지만, <code class=\"language-text\">Unstructured Storage Pattern</code>은 몇가지 단점이 존재한다.</p>\n<ol>\n<li>각 storage 변수에 대해서 getter와 setter를 정의해야한다.</li>\n<li>단순한 번수들에만 적용이 된다(<code class=\"language-text\">uint</code>, <code class=\"language-text\">address</code> 등). structs와 mappings에는 적용되기 힘들다.</li>\n</ol>\n<h3 id=\"inherited-storage\" style=\"position:relative;\"><a href=\"#inherited-storage\" aria-label=\"inherited storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inherited Storage</h3>\n<p>Proxy contract와 logic contract 이외에 storage contract를 배포해 상속(Inherit)하는 방법이다. 이 방법을 사용하면 proxy 와 logic contract가 동일한 상태변수를 선언하기 때문에 충돌이 발생하지 않는다. 아래 예시를 보자!</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Storage1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> facetA<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> user<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">ProxyA</span> <span class=\"token keyword\">is</span> Storage1 <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> code omitted <span class=\"token keyword\">for</span> simplicity\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">FacetA</span> <span class=\"token keyword\">is</span> Storage1 <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> code omitted <span class=\"token keyword\">for</span> simplicity\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>위와 같은 contract를 배포하고 연결한 후에 logic contract를 추가로 생성할 수 있고 새로운 상태변수를 정의할 수도 있다. 이 방법은 새로운 storage contract를 배포하고 이전의 storage contract를 상속하는 방식으로 작동한다.</p>\n<p>예시를 한번 보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Storage2</span> <span class=\"token keyword\">is</span> Storage1 <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> facetB<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> nextUser<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">FacetB</span> <span class=\"token keyword\">is</span> Storage2 <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> code omitted <span class=\"token keyword\">for</span> simplicity\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p><code class=\"language-text\">Storage2</code>는 ProxyA를 그대로 사용할 수 있다. 왜냐하면 <code class=\"language-text\">Storage2</code>의 새로운 상태변수들은 <code class=\"language-text\">Storage1</code>의 상태변수 뒤에 정의되기 때문이다.</p>\n<p>이 방식도 단점이 존재한다.</p>\n<ol>\n<li>Logic Contract들은 사용하지 않는 상태변수도 포함되어있는 Storage contract를 상속해야한다.</li>\n<li>Logic Contract는 특정 proxy contract와 연결되며 다른 상태변수를 선언하는 proxy cotnract 및 logic contract를 사용할 수 없다.</li>\n</ol>\n<br/>\n<!-- 이와 다르게 Diamond Storage는 단점이 존재하지 않는다.\n1. Proxy contracts, diamonds, Logic Contract는 자신들이 사용하는 Diamond Storage만 상속하면 된다. \n2. Diamond Storage는 proxy contrat와 Logic Contract를 분리시킬 수 있다. 또한 Diamond Storage를 사용하는 Logic contract는 다른 proxy contract 또는 logic contract와 같이 사용할 수 있다. Diamond Storage는 레고처럼 Logic contract와 proxy contract를 연결하거나 재사용 할 수 있게 해준다. -->\n<h3 id=\"eternal-storage\" style=\"position:relative;\"><a href=\"#eternal-storage\" aria-label=\"eternal storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eternal Storage</h3>\n<p>Ethernal Storage는 Solidity의 <code class=\"language-text\">mappings</code>를 사용해 contract storage API를 만드는 것이다. 그래서 Proxy와 logic contract는 API를 이용해 충돌없이 storage를 사용 할 수 있다.</p>\n<p>아래 예시를 보며 더 이해해 보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">ProxyA</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> uIntStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> uIntArrayStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> stringStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> addressStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> bytesStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        addressStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"owner\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        addressStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"facetA\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0b22380B7c423470979AC3eD7</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">address</span> facetAddress <span class=\"token operator\">=</span> addressStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"facetA\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> code omitted <span class=\"token keyword\">for</span> simplicity\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">FacetA</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> uIntStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> uIntArrayStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> stringStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> addressStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> bytesStorage<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> addressStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newUser<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">{</span>\n        addressStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newUser<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>위의 예시 같이 우리는 <code class=\"language-text\">mappings</code>를 사용해 상태변수를 저장하고 읽을 수 있다. 이렇게 해도 잘 작동하지만 단점이 분명 존재한다.</p>\n<ol>\n<li>상태변수를 다루기 힘든 문법</li>\n<li>기본적인 단순한 변수는 쉽게 사용될 수 있지만 <code class=\"language-text\">struct</code>와 <code class=\"language-text\">mapping</code>같은 경우 일반적인 방식으로 작동하지 않는다.</li>\n<li>Proxy contract와 모든 logic contract는 항상 같은 Storage API를 가지고 있어야한다.</li>\n<li>slot 순서대로 저장되는 것이 아니기 때문에 어떤 상태변수가 존재하는지 한눈에 확인할 수 없다.</li>\n</ol>\n<h3 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h3>\n<p>사람들은 Procy contract의 Storage Layout을 관리하기 위해 여러가지 방법을 생각해냈다.</p>\n<p>어떤 방법이 좋은지는 각자의 상황 및 취향에 따라 다르다. 하지만 어느 방법을 사용하든 단점이 존재한다. 그래서 나온 방법이 Diamond Storage이다. 다음 Post에서는 Diamond Storage에 대해서 다루겠다. Diamond Storage는 위 세가지 방법과 다르게 단점이 존재하지 않는다!</p>\n<h3 id=\"my-summary나에게-하는-말\" style=\"position:relative;\"><a href=\"#my-summary%EB%82%98%EC%97%90%EA%B2%8C-%ED%95%98%EB%8A%94-%EB%A7%90\" aria-label=\"my summary나에게 하는 말 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>My Summary(나에게 하는 말)</h3>\n<p>Proxy contract에 대해서 공부하며 찾은 글을 번역해보았다. Proxy contract를 처음 접했을 때는 막막하기만 했지만 좋은 글을 여러게 읽고나니 좀 이해가 되는 것 같다. Proxy에 대한 이론을 완벽하게 깨우친 후 직접 upgradable contract도 짜보자 <del>배우면 배울수록 배워야하는게 더 많아지는건 기분탓…?ㅎㅎ</del> 앞으로 꾸준히 배우자! 시간이 안되더라도 하루에 글 하나씩이라도 읽으며 익숙해지자. 화아팅!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%8B%9C%EC%9E%91\">시작</a></li>\n<li><a href=\"#problem\">Problem</a></li>\n<li><a href=\"#unstructured-storage\">Unstructured Storage</a></li>\n<li><a href=\"#inherited-storage\">Inherited Storage</a></li>\n<li><a href=\"#eternal-storage\">Eternal Storage</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n<li><a href=\"#my-summary%EB%82%98%EC%97%90%EA%B2%8C-%ED%95%98%EB%8A%94-%EB%A7%90\">My Summary(나에게 하는 말)</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 16, 2022","title":"Solidity Storage Layout For Proxy Contracts and Diamonds","categories":"EVM","author":"한성원","emoji":"🧢"},"fields":{"slug":"/EVM/StorageLayoutForProxy/"}},"prev":{"id":"5dda4cbf-8e78-5462-9855-1fef667c9f9a","html":"<h1 id=\"-olympus-dao에-대하여\" style=\"position:relative;\"><a href=\"#-olympus-dao%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC\" aria-label=\" olympus dao에 대하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Olympus Dao에 대하여</h1>\n<h2 id=\"olympus-dao란\" style=\"position:relative;\"><a href=\"#olympus-dao%EB%9E%80\" aria-label=\"olympus dao란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Olympus Dao란?</h2>\n<p>Olympus Dao는 중앙은행을 대채하기 위해 나온 탈중앙호 준비통화 프로토콜이다. 현재 Defi 2.0으로 현재는 시가총액이 많이 떨어졌지만 Defi 생태계를 이끌어가는 선두주자라고 할 수 있다.</p>\n<blockquote>\n<p>준비통화(Reserve Currency)란 준비 통화는 국가별로 지급을 대비해 보유한 외국환을 말한다.\nEx) 미국의 준비통화: 달러(Dollar), Olympus Dao의 준비통화: OHM</p>\n</blockquote>\n<p>Defi의 근본적인 목적을 달성하기 위해 Olympus Dao는 OHM이라는 준비통화를 사용한다. 달러의 경우 특정 집단(미 연준)이 통제권을 가지고 있다. 이에 반해서 Olympus Dao의 ohm은 커뮤니티가 통제권을 가지고 있다. 또한 커뮤니티가 앞으로의 방향성을 결정하며 투명하고 안정적인 준비통화 시스템을 만들어 나간다.</p>\n<h2 id=\"ohm의-특징-ohm-is-backed\" style=\"position:relative;\"><a href=\"#ohm%EC%9D%98-%ED%8A%B9%EC%A7%95-ohm-is-backed\" aria-label=\"ohm의 특징 ohm is backed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OHM의 특징 (OHM Is Backed)</h2>\n<p>현재 대부분의 스테이블 코인들은 1달러에 pegged 되어있다. 즉 1 스테이블 코인 = 1달러 라는 뜻이다. 하지만 OHM은 1 달러에 pegged 되는 대신 1달러를 지지(backing)한다. 좀 풀어서 말하면 OHM의 상한선은 정해져 있지 않지만, 하한선은 1달러로 정해져 있다는 뜻이다. 만약 OHM의 가격이 1달러 아래로 떨어지게 되면 프로토콜이 OHM을 사들여 소각하고 OHM의 공급량을 줄임으로써 가격을 유지시킨다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#olympus-dao%EB%9E%80\">Olympus Dao란?</a></li>\n<li><a href=\"#ohm%EC%9D%98-%ED%8A%B9%EC%A7%95-ohm-is-backed\">OHM의 특징 (OHM Is Backed)</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 12, 2022","title":"Olympus Dao란(작성중)","categories":"Defi","author":"한성원","emoji":"🧢"},"fields":{"slug":"/defi/OlympusDao에대하여/"}},"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":"holyhansss/holyhansss.github.io"}}}}},"pageContext":{"slug":"/about_me/리더가 되었다/리더가되었다/","nextSlug":"/EVM/StorageLayoutForProxy/","prevSlug":"/defi/OlympusDao에대하여/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}