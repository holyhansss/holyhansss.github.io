{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/allSeries/",
    "result": {"data":{"cur":{"id":"215ce45f-a0f2-56b0-9e68-03c15217730c","html":"<h1 id=\"-시리즈-별-정리\" style=\"position:relative;\"><a href=\"#-%EC%8B%9C%EB%A6%AC%EC%A6%88-%EB%B3%84-%EC%A0%95%EB%A6%AC\" aria-label=\" 시리즈 별 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 시리즈 별 정리</h1>\n<p>시리즈 별로 보기 편하게 정리해두었다!</p>\n<h2 id=\"취약점-시리즈\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"취약점 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 시리즈</h2>\n<p>취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다.</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/vulnerability/reentrancy_attack/reentrancy_attack/\">취약점 시리즈 1 Reentrancy Attack 재진입 공격</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/over_under_flow/over_under_flow/\">취약점 시리즈 2 Overflow &#x26; Underflow</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/block_timestamp/block_timestamp/\">취약점 시리즈 3 block.timestamp</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/delegate_call/delegate_call/\">취약점 시리즈 4 Delegate Call</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/front_running/front_running/\">취약점 시리즈 5 Front Running</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_unexpected_revert/dos_unexpected_revert/\">취약점 시리즈 6 DOS With Unexpected Revert</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_block_gas_limit/dos_block_gas_limit/\">취약점 시리즈 7 DOS With Block Gas Limit</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/tx.origin/tx_origin/\">취약점 시리즈 8 tx.origin</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/selfdestruct/selfdestruct/\">취약점 시리즈 9 Self Destruct</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/private_variable/private_variable/\">취약점 시리즈 10 Private</a></li>\n</ul>\n<h2 id=\"ethernaut-시리즈\" style=\"position:relative;\"><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"ethernaut 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ethernaut 시리즈</h2>\n<p>Ethernaut 시리즈는 Ethernaut 문제를 하나하나 풀어본 후 풀이를 적는다. 풀이를 적는 이유는 내가 완벽하게 이해하고 있어야 남들에게 설명해줄 수 있다고 생각하기 때문이다. Ethernaut를 풀기 시작한 여러분도 푸는 것에만 집중하는게 아니라 하나하나 뜯어보면서 배우길 바란다 :)</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/ethernaut/1_fallback_ethernaut/1_fallback_ethernaut/\">Ethernaut 1. Fallback</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/2_fallout_ethernaut/2_fallout_ethernaut/\">Ethernaut 2. Fallout</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/3_coinFilp_ethernaut/3_coinFlip_ethernaut/\">Ethernaut 3. CoinFlip</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/4_telephone_ethernaut/4_telephone_ethernaut/\">Ethernaut 4. Telephone</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/5_token_ethernaut/5_token_ethernaut/\">Ethernaut 5. Token</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/6_delegation_ethernaut/6_delegation_ethernaut/\">Ethernaut 6. Delegation</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/7_force_ethernaut/7_force_ethernaut/\">Ethernaut 7. Force</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/\">Ethernaut 8. Vault</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/9_king_ethernaut/9_king_ethernaut/\">Ethernaut 9. King</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/10_Re-entrancy_ethernaut/10_Re-entrancy_ethernaut/\">Ethernaut 10. Re-entrancy</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/11_elevator_ethernaut/11_elevator_ethernaut/\">Ethernaut 11. Elevator</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/\">Ethernaut 12. Privacy</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_1_ethernaut/\">Ethernaut 13. GateKeeperOne - 1</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_2_ethernaut/\">Ethernaut 13. GateKeeperOne - 1</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\">취약점 시리즈</a></li>\n<li><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\">Ethernaut 시리즈</a></li>\n</ul>\n</div>","excerpt":"👋 시리즈 별 정리 시리즈 별로 보기 편하게 정리해두었다! 취약점 시리즈 취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다. 취약점 시리즈 1 Reentrancy Attack 재진입 공격 취약점 시리즈 2 Overflow & Underflow 취약점 시리즈 3 block.timestamp 취약점 시리즈 4 Delegate Call 취약점 시리즈 5 Front Running 취약점 시리즈 6 DOS With Unexpected Revert 취약점 시리즈 7 DOS With Block Gas Limit 취약점 시리즈 8 tx.origin 취약점 시리즈 9 Self Destruct 취약점 시리즈 10 Private Ethernaut 시리즈 Ethernaut 시리즈는 Ethernaut 문제를 하나하나 풀어본 후 풀이를 적는다. 풀이를 적는 이유는 내가 완벽하게 이해하고 있어야 남들에게 설명해줄 수 있다고 생각하기 때문이다. Ethernaut를 풀기 시작한 여러분도 …","frontmatter":{"date":"January 01, 2099","title":"시리즈 별 정리(모든 글이 다 여기 정리되어 있어요!)","categories":"~feature~","author":"한성원","emoji":"🧢"},"fields":{"slug":"/allSeries/"}},"next":{"id":"a50195a3-5268-5cec-aaef-a2d1dc8802ae","html":"<h1 id=\"-privacy\" style=\"position:relative;\"><a href=\"#-privacy\" aria-label=\" privacy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Privacy</h1>\n<p><strong>Difficulty 5/10</strong></p>\n<ul>\n<li>승리 조건</li>\n<li>코드 분석</li>\n<li>풀이</li>\n</ul>\n<p>순서로 진행 될 것이다.</p>\n<hr>\n<h2 id=\"승리-조건\" style=\"position:relative;\"><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\" aria-label=\"승리 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>승리 조건</h2>\n<ul>\n<li>내가 가지고 있는 Naught Coin의 잔액을 0으로 만들기</li>\n</ul>\n<hr>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>분석은 주석에!\r\n주석중 영어로 쓰여있는 것은 기존 코드에 포함되어있던 것이다:)!\r\n더 자세한 설명은 코드 뒤에 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"> <span class=\"token keyword\">contract</span> <span class=\"token class-name\">NaughtCoin</span> <span class=\"token keyword\">is</span> ERC20 <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token comment\">// string public constant name = 'NaughtCoin';</span>\r\n    <span class=\"token comment\">// string public constant symbol = '0x0';</span>\r\n    <span class=\"token comment\">// uint public constant decimals = 18;</span>\r\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> timeLock <span class=\"token operator\">=</span> now <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">365</span> days<span class=\"token punctuation\">;</span>\r\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> INITIAL_SUPPLY<span class=\"token punctuation\">;</span>\r\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> player<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// constructor: NaughtCoin이라는 토큰을 만든다.</span>\r\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _player<span class=\"token punctuation\">)</span> \r\n    <span class=\"token function\">ERC20</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NaughtCoin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0x0'</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        player <span class=\"token operator\">=</span> _player<span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 총 공급량 설정</span>\r\n        INITIAL_SUPPLY <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">decimals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// _totalSupply = INITIAL_SUPPLY;</span>\r\n        <span class=\"token comment\">// _balances[player] = INITIAL_SUPPLY;</span>\r\n        <span class=\"token comment\">// 총 공급량만큼 player에게 공급</span>\r\n        <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span> INITIAL_SUPPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">,</span> INITIAL_SUPPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    \r\n\r\n    <span class=\"token comment\">// openzeppline의 ERC20.transfer()을 override한 function</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> _value<span class=\"token punctuation\">)</span> override <span class=\"token keyword\">public</span> lockTokens <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        super<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>_to<span class=\"token punctuation\">,</span> _value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 10년간 timelock이 걸려있다. 그래서 player는 10년간 token을 transfer하지 못한다.</span>\r\n    <span class=\"token comment\">// Prevent the initial owner from transferring tokens until the timelock has passed</span>\r\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">lockTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">></span> timeLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span> \r\n<span class=\"token punctuation\">}</span> \r\n\r\n</code></pre></div>\n<hr>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>NaughtCoin은 ERC20 토큰이며 당신은 이미 모든 토큰을 보유하고 있습니다. 중요한 건 10년의 폐쇄 기간이 지나야만 양도할 수 있다는 겁니다. 어떻게 하면 자유롭게 보낼 수 있는지 알아봐 주실 수 있나요? 토큰 잔액을 0으로 설정하여 이 수준을 완료하십시오.</p>\n<p>이 문제에서 우리의 목표는 우리가 가지고 있는 token의 개수를 0으로 만드는 것이다. 하지만 위 코드를 보면 알 수 있다시피 transfer은 10년간 사용할 수 없다. 그렇다면 어떻게 풀어야 할까?</p>\n<p>ERC20 token을 deploy 해봤다면 transfer이외에 토큰을 주고받을 수 있는 방법이 있다는 것을 알 것이다.</p>\n<p>ERC20에 관해서 잘 모른다면 이 문제를 풀 수 없다! <a href=\"https://eips.ethereum.org/EIPS/eip-20\">여기서</a> ERC20에 관해 배우고 오자.</p>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20/ERC20.sol\">openzeppline ERC20 contract</a></li>\n</ul>\n<p>ERC20은 transfer이 외에 transferFrom이라는 함수가 존재한다. transferFrom 함수는 다른 address에게 approve 받은 만큼의 토큰을 보낼 수 있게된다. 즉 A가 B에게 원하는 양만큼 approve, B가 자신에게 approve된 만큼 누구에게든 token을 보낼 수 있게된다.</p>\n<p>우리가 이 문제를 풀 수 있는 시나리오는 이렇다.</p>\n<ol>\n<li>player account이외의 account를 하나 더 생성한다. 생성한 account를 B라고 칭하겠다.</li>\n<li>player인 우리가 우리 자신에게 전체 token의 양만큼을 approve 해준다.</li>\n<li>우리는 approve받은 양만큼 transferFrom함수를 사용해 B에 이체한다.</li>\n<li>player의 token balance는 0이 된다.</li>\n</ol>\n<p>그렇다면 푸는 방법을 보며 좀 더 이해해보자\r\n풀기 전 metamask를 통해 account를 하나 더 생성한다.</p>\n<p>우선 console 창에서 실행시킨다\r\nctrl + shift + i를 눌러 console창을 활성화 시키자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 먼저 우리가 이채해야할 token의 양을 파악해야한다.</span>\r\n<span class=\"token keyword\">let</span> playerBalance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span>\r\nplayerBalance<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1000000000000000000000000\"</span>\r\n\r\n<span class=\"token comment\">// player 자신에게 토큰 이체 권한을 부여한다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span><span class=\"token string\">\"1000000000000000000000000\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// B account에게 모든 token을 이체한다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0x690A732BA98fcfe72bDedE2085816BCF6498058d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1000000000000000000000000\"</span><span class=\"token punctuation\">)</span>\r\n</code></pre></div>\n<p>이후 Submit instance를 누르고 조금 기다리면 block이 mine되고, 아래와 같이 뜨며 마무리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">٩(- ̮̮̃-̃)۶ Well done, You have completed this level!!!</code></pre></div>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>이번 문제에서는 ERC20 토큰에 대한 개념을 다루는 것 같다. ERC20에 대해서 잘 이해하고 있다면 쉽게 풀 수 있는 문제였다고 생각한다. 문제를 풀면 나오는 설명에서도 contract를 만든 사람은 ERC20에 대해 잘 모르는 사람일 것이라고 말했다. ERC20은 Defi와 여러 서비스에서 사용하고 있는 <strong>표쥰</strong> 이기 때문에 필수 적으로 자세히 알아야한다고 생각한다. 앞으로 여러 contract를 분석해보면서 더 깊은 이해를 해보자^^!</p>\n<hr>\n<h2 id=\"기타-정보\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\" aria-label=\"기타 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 정보</h2>\n<ul>\n<li>rinkeyb network ether faucet: <a href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a></li>\n<li>ethernaut: <a href=\"https://ethernaut.openzeppelin.com/\">https://ethernaut.openzeppelin.com/</a></li>\n<li>remix IDE: <a href=\"https://remix.ethereum.org\">https://remix.ethereum.org</a></li>\n<li>참고 자료: <a href=\"https://medium.com/coinmonks/ethernaut-lvl-14-gatekeeper-2-walkthrough-how-contracts-initialize-and-how-to-do-bitwise-ddac8ad4f0fd\">https://medium.com/coinmonks/ethernaut-lvl-14-gatekeeper-2-walkthrough-how-contracts-initialize-and-how-to-do-bitwise-ddac8ad4f0fd</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\">승리 조건</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\">코드 분석</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\">기타 정보</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 22, 2022","title":"(Ethernaut 취약점 15) Naught Coin","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/ethernaut/15_naughtCoin_ethernaut/15_naughtCoin_ethernaut/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/allSeries/","nextSlug":"/ethernaut/15_naughtCoin_ethernaut/15_naughtCoin_ethernaut/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}