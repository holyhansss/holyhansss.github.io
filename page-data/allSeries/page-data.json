{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/allSeries/",
    "result": {"data":{"cur":{"id":"215ce45f-a0f2-56b0-9e68-03c15217730c","html":"<h1 id=\"-시리즈-별-정리\" style=\"position:relative;\"><a href=\"#-%EC%8B%9C%EB%A6%AC%EC%A6%88-%EB%B3%84-%EC%A0%95%EB%A6%AC\" aria-label=\" 시리즈 별 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 시리즈 별 정리</h1>\n<p>시리즈 별로 보기 편하게 정리해두었다!</p>\n<h2 id=\"취약점-시리즈\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"취약점 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 시리즈</h2>\n<p>취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다.</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/vulnerability/reentrancy_attack/reentrancy_attack/\">취약점 시리즈 1 Reentrancy Attack 재진입 공격</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/over_under_flow/over_under_flow/\">취약점 시리즈 2 Overflow &#x26; Underflow</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/block_timestamp/block_timestamp/\">취약점 시리즈 3 block.timestamp</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/delegate_call/delegate_call/\">취약점 시리즈 4 Delegate Call</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/front_running/front_running/\">취약점 시리즈 5 Front Running</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_unexpected_revert/dos_unexpected_revert/\">취약점 시리즈 6 DOS With Unexpected Revert</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_block_gas_limit/dos_block_gas_limit/\">취약점 시리즈 7 DOS With Block Gas Limit</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/tx.origin/tx_origin/\">취약점 시리즈 8 tx.origin</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/selfdestruct/selfdestruct/\">취약점 시리즈 9 Self Destruct</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/private_variable/private_variable/\">취약점 시리즈 10 Private</a></li>\n</ul>\n<h2 id=\"ethernaut-시리즈\" style=\"position:relative;\"><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"ethernaut 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ethernaut 시리즈</h2>\n<p>Ethernaut 시리즈는 Ethernaut 문제를 하나하나 풀어본 후 풀이를 적는다. 풀이 뿐만 아니라 Ethernaut에서 알려주려하는 취약점들에 대해서도 관련한 설명들을 담았다.</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/ethernaut/1_fallback_ethernaut/1_fallback_ethernaut/\">Ethernaut 1. Fallback</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/2_fallout_ethernaut/2_fallout_ethernaut/\">Ethernaut 2. Fallout</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/3_coinFilp_ethernaut/3_coinFlip_ethernaut/\">Ethernaut 3. CoinFlip</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/4_telephone_ethernaut/4_telephone_ethernaut/\">Ethernaut 4. Telephone</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/5_token_ethernaut/5_token_ethernaut/\">Ethernaut 5. Token</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/6_delegation_ethernaut/6_delegation_ethernaut/\">Ethernaut 6. Delegation</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/7_force_ethernaut/7_force_ethernaut/\">Ethernaut 7. Force</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/\">Ethernaut 8. Vault</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/9_king_ethernaut/9_king_ethernaut/\">Ethernaut 9. King</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/10_Re-entrancy_ethernaut/10_Re-entrancy_ethernaut/\">Ethernaut 10. Re-entrancy</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/11_elevator_ethernaut/11_elevator_ethernaut/\">Ethernaut 11. Elevator</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/\">Ethernaut 12. Privacy</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\">취약점 시리즈</a></li>\n<li><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\">Ethernaut 시리즈</a></li>\n</ul>\n</div>","excerpt":"👋 시리즈 별 정리 시리즈 별로 보기 편하게 정리해두었다! 취약점 시리즈 취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다. 취약점 시리즈 1 Reentrancy Attack 재진입 공격 취약점 시리즈 2 Overflow & Underflow 취약점 시리즈 3 block.timestamp 취약점 시리즈 4 Delegate Call 취약점 시리즈 5 Front Running 취약점 시리즈 6 DOS With Unexpected Revert 취약점 시리즈 7 DOS With Block Gas Limit 취약점 시리즈 8 tx.origin 취약점 시리즈 9 Self Destruct 취약점 시리즈 10 Private Ethernaut 시리즈 Ethernaut 시리즈는 Ethernaut 문제를 하나하나 풀어본 후 풀이를 적는다. 풀이 뿐만 아니라 Ethernaut에서 알려주려하는 취약점들에 대해서도 관련한 설명들을 담았다. Ethernaut 1. Fallback Et…","frontmatter":{"date":"January 01, 2099","title":"시리즈 별 정리(모든 글이 다 여기 정리되어 있어요!)","categories":"~feature~","author":"한성원","emoji":"🧢"},"fields":{"slug":"/allSeries/"}},"next":{"id":"b50da4de-d0d0-5747-968e-d0d20046f3b3","html":"<h1 id=\"-gatekeeper-one\" style=\"position:relative;\"><a href=\"#-gatekeeper-one\" aria-label=\" gatekeeper one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Gatekeeper One</h1>\n<p><strong>Difficulty 5/10</strong></p>\n<p><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_1_ethernaut/\">GatekeeperOne - 1</a>에서 이어지는 글이다 !</p>\n<hr>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>GatekeeperOne contract에서스 3개의 gate가 존재한다. gate는 모두 modifier로 되어있다. 즉 3개의 modifier의 조건을 만족시키면 된다.<br>\n분석은 주석에!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">GatekeeperOne</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> entrant<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// msg.sender과 tx.origin이 다르면 진행</span>\r\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">!=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// gasleft()의 8191의 배수이면 진행</span>\r\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mod</span><span class=\"token punctuation\">(</span><span class=\"token number\">8191</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// _gateKey가 type casting관련 3가지 조건에 만족하면 진행</span>\r\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// modifier를 포함한 함수: 이 함수를 통해 내가 entrant가 될 수 있다.</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> gateOne gateTwo <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        entrant <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<hr>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>우리가 풀어야할 문제는 gate3 밖에 남지 않았다! Gate3는 <a href=\"https://www.tutorialspoint.com/solidity/solidity_conversions.htm\">Type Conversion</a>를 잘 알아야 풀 수 있다.</p>\n<p>3가지 조건에 만족해야하기 때문에 하나하나 확인해 보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\r\n우선 마지막 조건을 보면 type conversion한 tx.origin과 _gateKey가 같아야 하는 것을 볼 수 있다. gateKey는 각자의 EOA에서 파생된다.   \r\n나의 EOA: 0x0d3D56806fe6eeDe410Ea9722da9a6f65FD24799\n<p>이제 첫번째 조건을 보자. 첫번째 조건은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\r\n우선 8 bytes인 _gateKey를 uint64로 바꾸면 어떻게 될까??\r\n나의 주소는 20 bytes로 구성되어있고 이를 8 bytes로 줄이게되면 뒤에 16자리만 남게된다.\n<ul>\n<li>0x2da9a6f65FD24799</li>\n</ul>\n<br/>\r\n나는 편의성을 위해 bytes로만 계산 할 것이다.   \n<ul>\n<li>uint32 = bytes4</li>\n<li>uint16 = bytes2</li>\n</ul>\n<p>우선 bytes8 를 bytes2로 바꾸면 아래 4자리만 보존된다.\r\n그리고 bytes8 를 bytes4로 바꾸면 아래 8자리만 보존된다.</p>\n<p>bytes2와 bytes4가 같으려면 다음과 같이 bytes4에 0000이 붙어있으면 된다.</p>\n<ul>\n<li>0x1234 = 0x00001234</li>\n</ul>\n<p>나의 account가 0x2da9a6f600004799와 같다면 첫번째 조건을 만족시킬 수 있다.</p>\n<br/>\r\n두번째 조건은 아래와 같다.\r\n```solidity\r\nrequire(uint32(uint64(_gateKey)) != uint64(_gateKey))\r\n``` \r\n첫번째 조건을 완벽하게 이해했다면 두번째 조건은 계산없이도 통과하는 것을 알 수 있다.\r\n0x2da9a6f000024799를 bytes4로 바꾸게 되면 0x00004799로 아래 8자리만 보존된다. \r\n보존된 bytes4와 bytes8이 같으려면 bytes8은 다음과 같아야한다. \r\n- 0x0000000000004799\n<p>그렇다면 우리는 1번에서 구한 값 그대로 넣는다면 2번 조건은 해결된다!</p>\n<br/>\r\n마지막 조건은 아래와 같다. \r\n```solidity\r\nrequire(uint32(uint64(_gateKey)) == uint16(tx.origin))\r\n```\r\n위 계산처럼 한번 계산해보자!\r\nuint32(uint64(_gateKey)는 bytes4가 되고 uint16은 bytes2가 된다. 위에서 말했듯이 tx.origin은 나의 account이다. 나의 account를 bytes2로 바꾸면 1번처럼 아래 4자리만 남게된다.  \n<ul>\n<li>0x4799</li>\n</ul>\n<p>이와 bytes4가 같으려면 bytes4의 값은 0x00004799 이면된다.\r\n우리는 위에서 우리의 account를 적용해 풀었음으로 이미 푼 것과 다름 없다ㅎㅎ!</p>\n<br/>\r\n나는 remix에 다음과 같은 코드를 작성하여 배포하고 위에서 찾은 _gateKey를 적용해 gatekeeperOne contract에 call을 보냈다.\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">GetEntrant</span> <span class=\"token punctuation\">{</span>\r\n       \r\n    GatekeeperOne gatekeeperOne<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _gatekeeperOne<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        gatekeeperOne <span class=\"token operator\">=</span> <span class=\"token function\">GatekeeperOne</span><span class=\"token punctuation\">(</span>_gatekeeperOne<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        gatekeeperOne<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">{</span>gas<span class=\"token punctuation\">:</span> <span class=\"token number\">40955</span><span class=\"token operator\">+</span><span class=\"token number\">254</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이후 Submit instance를 누르고 조금 기다리면 block이 mine되고, 아래와 같이 뜨며 마무리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">٩(- ̮̮̃-̃)۶ Well done, You have completed this level!!!</code></pre></div>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>지금까지 공부한 것 중 가장 어려웠으며 가장 공부를 많이 한 것 같다. 이 문제를 풀고나니 gatekeeper2가 기대된다ㅋㅋ\r\ngatekeeperOne을 통해 좀 더 깊은 곧을 들여다볼 수 있었다. 평소에 잘 하지않는 debugging과 type conversion에 따른 data 보존 및 손실을 더 잘 다룰 수 있게 된 것 같다. 또한 gas fee가 opcode마다 얼마나 생성되는지도 눈으로 확인해보았기 때문에 EVM에 대한 이해력이 좀 더 상승한 것 같다! gatekeeperTwo도 화이팅 해보자 :)</p>\n<hr>\n<h2 id=\"기타-정보\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\" aria-label=\"기타 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 정보</h2>\n<ul>\n<li>rinkeyb network ether faucet: <a href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a></li>\n<li>ethernaut: <a href=\"https://ethernaut.openzeppelin.com/\">https://ethernaut.openzeppelin.com/</a></li>\n<li>remix IDE: <a href=\"https://remix.ethereum.org\">https://remix.ethereum.org</a></li>\n<li>Storage &#x26; Casting: <a href=\"https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183\">https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","frontmatter":{"date":"January 19, 2022","title":"(Ethernaut 취약점 13) Gatekeeper One - 2","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_2_ethernaut/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/allSeries/","nextSlug":"/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_2_ethernaut/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}