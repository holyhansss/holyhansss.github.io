{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/allSeries/",
    "result": {"data":{"cur":{"id":"c62a820c-b3c5-548f-9a7f-fc45590aab89","html":"<h1 id=\"-시리즈-별-정리\" style=\"position:relative;\"><a href=\"#-%EC%8B%9C%EB%A6%AC%EC%A6%88-%EB%B3%84-%EC%A0%95%EB%A6%AC\" aria-label=\" 시리즈 별 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 시리즈 별 정리</h1>\n<p>시리즈 별로 보기 편하게 정리해두었다!</p>\n<h2 id=\"defi\" style=\"position:relative;\"><a href=\"#defi\" aria-label=\"defi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defi</h2>\n<ul>\n<li><a href=\"https://holyhansss.github.io/defi/Defi_1.0vs2.0/\">Defi 1.0 vs 2.0</a></li>\n<li><a href=\"https://holyhansss.github.io/defi/UniswapV2/uniswapV2CoreFactory/\">UniswapV2 Core Factory Contract</a></li>\n<li><a href=\"https://holyhansss.github.io/defi/UniswapV2/uniswapV2CorePair/\">UniswapV2 Core Pair Contract</a></li>\n<li><a href=\"https://holyhansss.github.io/defi/UniswapV2/uniswapV2PeripheryRouter/\">UniswapV2 Periphery Router Contract</a></li>\n</ul>\n<h2 id=\"defi-math\" style=\"position:relative;\"><a href=\"#defi-math\" aria-label=\"defi math permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Defi Math</h2>\n<ul>\n<li><a href=\"https://holyhansss.github.io/defi/Defi_Math/Defi_Math_TWAP/\">TWAP(Time Weighted Average Price)</a></li>\n</ul>\n<h2 id=\"evm\" style=\"position:relative;\"><a href=\"#evm\" aria-label=\"evm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EVM</h2>\n<ul>\n<li><a href=\"https://holyhansss.github.io/EVM/evm/\">EVM과 Transaction</a></li>\n<li><a href=\"https://holyhansss.github.io/EVM/SolidityBytecodeandOpcodeBasics/\">Solidity Bytecode and Opcode Basics</a></li>\n<li><a href=\"https://holyhansss.github.io/EVM/StorageLayoutForProxy/\">Solidity Storage Layout For Proxy Contracts and Diamonds</a></li>\n<li><a href=\"https://holyhansss.github.io/S.C/salt%EB%9E%80/\">Salt란?</a></li>\n</ul>\n<h2 id=\"취약점-시리즈\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"취약점 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 시리즈</h2>\n<p>취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다.</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/vulnerability/reentrancy_attack/reentrancy_attack/\">취약점 시리즈 1 Reentrancy Attack 재진입 공격</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/over_under_flow/over_under_flow/\">취약점 시리즈 2 Overflow &#x26; Underflow</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/block_timestamp/block_timestamp/\">취약점 시리즈 3 block.timestamp</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/delegate_call/delegate_call/\">취약점 시리즈 4 Delegate Call</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/front_running/front_running/\">취약점 시리즈 5 Front Running</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_unexpected_revert/dos_unexpected_revert/\">취약점 시리즈 6 DOS With Unexpected Revert</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_block_gas_limit/dos_block_gas_limit/\">취약점 시리즈 7 DOS With Block Gas Limit</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/tx.origin/tx_origin/\">취약점 시리즈 8 tx.origin</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/selfdestruct/selfdestruct/\">취약점 시리즈 9 Self Destruct</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/private_variable/private_variable/\">취약점 시리즈 10 Private</a></li>\n</ul>\n<h2 id=\"ethernaut-시리즈\" style=\"position:relative;\"><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"ethernaut 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ethernaut 시리즈</h2>\n<p>Ethernaut 시리즈는 Ethernaut 문제를 하나하나 풀어본 후 풀이를 적는다. 거의 모든 문제가 어렵기 때문에 풀이를 보며 공부하고, 이해한 내용을 적었다. Ethernaut를 풀기 시작한 여러분도 푸는 것에만 집중하는게 아니라 하나하나 뜯어보면서 배우길 바란다 :)</p>\n<ul>\n<li><a href=\"https://holyhansss.github.io/ethernaut/1_fallback_ethernaut/1_fallback_ethernaut/\">Ethernaut 1. Fallback</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/2_fallout_ethernaut/2_fallout_ethernaut/\">Ethernaut 2. Fallout</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/3_coinFilp_ethernaut/3_coinFlip_ethernaut/\">Ethernaut 3. CoinFlip</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/4_telephone_ethernaut/4_telephone_ethernaut/\">Ethernaut 4. Telephone</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/5_token_ethernaut/5_token_ethernaut/\">Ethernaut 5. Token</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/6_delegation_ethernaut/6_delegation_ethernaut/\">Ethernaut 6. Delegation</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/7_force_ethernaut/7_force_ethernaut/\">Ethernaut 7. Force</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/\">Ethernaut 8. Vault</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/9_king_ethernaut/9_king_ethernaut/\">Ethernaut 9. King</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/10_Re-entrancy_ethernaut/10_Re-entrancy_ethernaut/\">Ethernaut 10. Re-entrancy</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/11_elevator_ethernaut/11_elevator_ethernaut/\">Ethernaut 11. Elevator</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/\">Ethernaut 12. Privacy</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_1_ethernaut/\">Ethernaut 13. GatekeeperOne - 1</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_2_ethernaut/\">Ethernaut 13. GatekeeperOne - 2</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/14_gatekeeperTwo_ethernaut/14_gatekeeperTwo_ethernaut/\">Ethernaut 14. GatekeeperTwo</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/15_naughtCoin_ethernaut/15_naughtCoin_ethernaut/\">Ethernaut 15. Naught Coin</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/16_preservation_ethernaut/16_preservation_ethernaut/\">Ethernaut 16. Preservation</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/17_recovery_ethernaut/17_recovery_ethernaut/\">Ethernaut 17. Recovery</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/18_magicNumber_ethernaut/18_magicNumber_ethernaut/\">Ethernaut 18. MagicNumber</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/19_alienCodex_ethernaut/19_alienCodex_ethernaut/\">Ethernaut 19. Alien Codex</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/20_denial_ethernaut/20_denial_ethernaut/\">Ethernaut 20. Denial</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/21_shop_ethernaut/21_shop_ethernaut/\">Ethernaut 21. Shop</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#defi\">Defi</a></li>\n<li><a href=\"#defi-math\">Defi Math</a></li>\n<li><a href=\"#evm\">EVM</a></li>\n<li><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\">취약점 시리즈</a></li>\n<li><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\">Ethernaut 시리즈</a></li>\n</ul>\n</div>","excerpt":"👋 시리즈 별 정리 시리즈 별로 보기 편하게 정리해두었다! Defi Defi 1.0 vs 2.0 UniswapV2 Core Factory Contract UniswapV2 Core Pair Contract UniswapV2 Periphery Router Contract Defi Math TWAP(Time Weighted Average Price) EVM EVM과 Transaction Solidity Bytecode and Opcode Basics Solidity Storage Layout For Proxy Contracts and Diamonds Salt란? 취약점 시리즈 취약점 시리즈는 알려진 smart contract의 취약점에 대해 다룬다. 취약점 시리즈 1 Reentrancy Attack 재진입 공격 취약점 시리즈 2 Overflow & Underflow 취약점 시리즈 3 block.timestamp 취약점 시리즈 4 Delegate Call 취약점 시리즈 5 Front R…","frontmatter":{"date":"January 01, 2099","title":"시리즈 별 정리(모든 글이 다 여기 정리되어 있어요!)","categories":"~feature~","author":"한성원","emoji":"🧢"},"fields":{"slug":"/allSeries/"}},"next":{"id":"04f8cd91-009b-553e-8f2d-18e2f5f24b8b","html":"<h1 id=\"-salt란-무엇인가\" style=\"position:relative;\"><a href=\"#-salt%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\" salt란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Salt란 무엇인가?</h1>\n<h2 id=\"salt를-알아보는-이유\" style=\"position:relative;\"><a href=\"#salt%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"salt를 알아보는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Salt를 알아보는 이유</h2>\n<p>개인적으로 Smart Contract를 분석하다보면 <code class=\"language-text\">salt</code>라는 변수를 볼때가 많았다. 내가 처음 salt를 접한 것은 <code class=\"language-text\">Uniswap Factory Contract</code>였다. 이때는 하나하나의 변수에 집중하기보다는 Uniswap의 구조와 주요 함수 및 변수를 위주로 봤기 때문에 salt라는 변수는 별생각 없이 넘겼었다. 하지만 다른 Smart Contract에서도 salt 변수를 반복적으로 사용하는 것을 확인하였고, Salt에 대해 알아볼 필요성을 느꼈다.</p>\n<hr>\n<h2 id=\"salt\" style=\"position:relative;\"><a href=\"#salt\" aria-label=\"salt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Salt</h2>\n<p>일반적으로 smart contract을 배포할때는 배포할때마다 증가하는 카운터(nonce)의 값을 사용하여 contract의 주소가 계산된다. 하지만 옵션으로 salt값을 주는 경우 카운터(nonce)를 사용하지 않고 다른 메커니즘을 사용해 contract의 주소를 계산한다.</p>\n<p>salt를 사용하여 주소를 계산하는 메커니즘은 contract의 주소를 예측할 수 있게 해준다.</p>\n<p>위키백과에는 salt를 다음과 같이 설명하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">In cryptography, a salt is random data that is used as an additional input to a one-way function that hashes data, a password or passphrase.[1]\n[full citation needed] Salts are used to safeguard passwords in storage. Historically, only a cryptographic hash function of the password was stored \non a system, but over time, additional safeguards were developed to protect against duplicate or common passwords being identifiable (as their hashes \nare identical).[2] Salting is one such protection.</code></pre></div>\n<p>해석하면 salt는 암호학에서 데이터나 암호를 해시하는 단방향 함수에 추가적으로 사용되는 임의의 데이터이다. salt는 저장소 안에 있는 암호를 보호하는데 사용된다. 과거에는 암호를 해시 함수에만 의존해 저장소에 저장했지만 시간이 지남에 따라 중복되거나 공통적인 암호에 대한 가능성이 생겼고 이를 보호하기 위한 추가 안전장치로써 salt가 개발되었다.</p>\n<p>solidity에서 salt의 예시는 두가지 경우에서 찾아볼 수 있다.</p>\n<ol>\n<li>create2</li>\n</ol>\n<p>첫번째 경우는 solidity assembly의 create2이다. CREATE2 opcode를 사용하면 contract가 배포될 주소를 예측할 수 있고, 사용자 온보딩 및 확장성을 개선할 수 있는 많은 가능성이 열립니다.(<a href=\"https://docs.openzeppelin.com/cli/2.8/deploying-with-create2\">openzeppelin</a>)</p>\n<hr>\n<h3 id=\"example-from-solidity-docs\" style=\"position:relative;\"><a href=\"#example-from-solidity-docs\" aria-label=\"example from solidity docs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example from solidity docs</h3>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">    <span class=\"token comment\">// SPDX-License-Identifier: GPL-3.0</span>\n    <span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">>=</span><span class=\"token version number\">0.7.0</span> <span class=\"token operator\">&lt;</span><span class=\"token version number\">0.9.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">contract</span> <span class=\"token class-name\">D</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">contract</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">createDSalted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> salt<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> arg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// This complicated expression just tells you how the address</span>\n            <span class=\"token comment\">// can be pre-computed. It is just there for illustration.</span>\n            <span class=\"token comment\">// You actually only need ``new D{salt: salt}(arg)``.</span>\n            <span class=\"token builtin\">address</span> predictedAddress <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>\n                <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                salt<span class=\"token punctuation\">,</span>\n                <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>creationCode<span class=\"token punctuation\">,</span>\n                    abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n            D d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">{</span>salt<span class=\"token punctuation\">:</span> salt<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> predictedAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>예시를 보면 CREATE2 opcode와 salt를 사용해 주소를 예측하고, 실제로 배포함 contract와 주소를 비교하는 것을 볼 수 있다.</p>\n<ol start=\"2\">\n<li>중복 보호</li>\n</ol>\n<p><a href=\"https://www.damnvulnerabledefi.xyz/challenges/12.html\">Damn Vulnerable Defi</a> 12본 Climber에 사용된 salt이다. 여기서 salt는 Id 중복을 보호하기 위해 사용된 것으로 보인다. 아래 코드를 보면 salt 값을 넣어 hash 값을 구함으로써 중복을 방지하고 있는 것을 알 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">   <span class=\"token keyword\">function</span> <span class=\"token function\">getOperationId</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">calldata</span> targets<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">calldata</span> values<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">calldata</span> dataElements<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> salt\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> dataElements<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"ref\" style=\"position:relative;\"><a href=\"#ref\" aria-label=\"ref permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ref</h2>\n<p>openzeppelin docs: <a href=\"https://docs.openzeppelin.com/cli/2.8/deploying-with-create2\">https://docs.openzeppelin.com/cli/2.8/deploying-with-create2</a></p>\n<p>solidity docs: <a href=\"https://docs.soliditylang.org/en/v0.8.16/control-structures.html?highlight=create2#salted-contract-creations-create2\">https://docs.soliditylang.org/en/v0.8.16/control-structures.html?highlight=create2#salted-contract-creations-create2</a></p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#salt%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EC%9D%B4%EC%9C%A0\">Salt를 알아보는 이유</a></p>\n</li>\n<li>\n<p><a href=\"#salt\">Salt</a></p>\n<ul>\n<li><a href=\"#example-from-solidity-docs\">Example from solidity docs</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ref\">Ref</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 08, 2022","title":"Salt란 무엇인가?","categories":"solidity","author":"한성원","emoji":"🧢"},"fields":{"slug":"/S.C/salt란/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/allSeries/","nextSlug":"/S.C/salt란/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}