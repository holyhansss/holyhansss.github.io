{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/smart_contract/blockTimestamp/",
    "result": {"data":{"cur":{"id":"f83ba5b9-1382-5ba3-bfc7-a0e88a153fca","html":"<h1 id=\"-blocktimestamp\" style=\"position:relative;\"><a href=\"#-blocktimestamp\" aria-label=\" blocktimestamp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 block.timestamp</h1>\n<h2 id=\"blocktimestamp란\" style=\"position:relative;\"><a href=\"#blocktimestamp%EB%9E%80\" aria-label=\"blocktimestamp란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>block.timestamp란?</h2>\n<p>block.timestamp는 msg.sender처럼 블록체인에서 제공해주는 global 변수 중 하나이다. 이는 블록 생성 시간을 나타낸다.\r\n블록체인의 timestamp는 생성 시점에 데이터가 존재했다는 사실을 증명해주기 때문에 블록체인 자체에 매우 중요하다.</p>\n<hr>\n<h2 id=\"왜-취약점-시리즈에-들어갔을까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88%EC%97%90-%EB%93%A4%EC%96%B4%EA%B0%94%EC%9D%84%EA%B9%8C\" aria-label=\"왜 취약점 시리즈에 들어갔을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 취약점 시리즈에 들어갔을까?</h2>\n<p>바로 block.timestamp는 채굴자(miner)들에게 영향을 받을 수 있기 때문이다. 즉 block.timestamp를 통해 random을 생성하거나 block.timestamp와 관련해서 접근할 수 있는 함수가 있다면 smart contract에게 좋지 않은 영향을 끼칠 수 있다.</p>\n<hr>\n<h2 id=\"example-code\" style=\"position:relative;\"><a href=\"#example-code\" aria-label=\"example code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example code</h2>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Roulette</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> pastBlockTime<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">spin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">10</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// must send 10 ether to play</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">!=</span> pastBlockTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// only 1 transaction per block</span>\r\n\r\n        pastBlockTime <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">%</span> <span class=\"token number\">15</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> sent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to send Ether\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><span style=\"color:grey\">출처: <a href=\"https://solidity-by-example.org/hacks/block-timestamp-manipulation/\">https://solidity-by-example.org/hacks/block-timestamp-manipulation/</a></span></p>\n<p>위 코드를 실행시켜 볼 수는 있지만 실제 해킹 실습까지 해보는 것은 어려울 것이라고 생각한다. 우리가 miner가 될 수 없기 때문에ㅠㅠ</p>\n<p>위 코드는 룰랫을 통해 ether를 얻을 수 있는 게임이다.\r\n10 ether를 contract account에 보내고 만약 timestamp가 15의 배수라면 CA에 있는 모든 ether를 가져올 수 있다.</p>\n<p>예를 들어, CA에 300 ether가 쌓여있다고 생각해보자! 2021/12/23 시세로 300 ehter는 14억이 넘는 돈이다. 만약 miner가 timestamp를 조작하는데 드는 비용이 14억보다 적게든다면 조작을 시도해볼만 하다.</p>\n<hr>\n<h2 id=\"어떻게하면-예방할-수-있을까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C%ED%95%98%EB%A9%B4-%EC%98%88%EB%B0%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"어떻게하면 예방할 수 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게하면 예방할 수 있을까?</h2>\n<p>block.timstamp는 블록생성 시간이 필요할 때만 사용하면 된다. random이나 block.timestamp가 들어가 조건에 의해서 ether가 또는 데이터가 보내져서는 안된다.</p>\n<p>block.timestamp와 마찬가지로 <strong>now</strong>, <strong>block.hash</strong> 의 사용도 되도록 피하는 것이 좋다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#blocktimestamp%EB%9E%80\">block.timestamp란?</a></li>\n<li><a href=\"#%EC%99%9C-%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88%EC%97%90-%EB%93%A4%EC%96%B4%EA%B0%94%EC%9D%84%EA%B9%8C\">왜 취약점 시리즈에 들어갔을까?</a></li>\n<li><a href=\"#example-code\">Example code</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C%ED%95%98%EB%A9%B4-%EC%98%88%EB%B0%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\">어떻게하면 예방할 수 있을까?</a></li>\n</ul>\n</div>","excerpt":"👋 block.timestamp block.timestamp란? block.timestamp는 msg.sender처럼 블록체인에서 제공해주는 global 변수 중 하나이다. 이는 블록 생성 시간을 나타낸다.\r\n블록체인의 timestamp는 생성 시점에 데이터가 존재했다는 사실을 증명해주기 때문에 블록체인 자체에 매우 중요하다. 왜 취약점 시리즈에 들어갔을까? 바로 block.timestamp는 채굴자(miner)들에게 영향을 받을 수 있기 때문이다. 즉 block.timestamp를 통해 random을 생성하거나 block.timestamp와 관련해서 접근할 수 있는 함수가 있다면 smart contract에게 좋지 않은 영향을 끼칠 수 있다. Example code 출처: https://solidity-by-example.org/hacks/block-timestamp-manipulation/ 위 코드를 실행시켜 볼 수는 있지만 실제 해킹 실습까지 해보는 것은 어려울 것이라고 생각…","frontmatter":{"date":"December 23, 2021","title":"(취약점 시리즈 3) block.timestamp","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/smart_contract/blockTimestamp/"}},"next":{"id":"27b12f85-c581-5236-a307-30b627d0e84e","html":"<h1 id=\"-over--underflow\" style=\"position:relative;\"><a href=\"#-over--underflow\" aria-label=\" over  underflow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Over &#x26; UnderFlow</h1>\n<h2 id=\"들어가기-전\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\" aria-label=\"들어가기 전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 전</h2>\n<p>Overflow와 Underflow는 solidity 0.8.0 버전부터 알아서 컨트롤 되게 바뀌었다.\r\n0.8.0 이후 버전을 사용하시는 분은 아래로 내려가도 좋다.</p>\n<hr>\n<h2 id=\"overflow와-underflow란\" style=\"position:relative;\"><a href=\"#overflow%EC%99%80-underflow%EB%9E%80\" aria-label=\"overflow와 underflow란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OverFlow와 UnderFlow란</h2>\n<p>Overflow는 지정된 정수형(int)의 최댓값보다 커졌을 때 발생한다.<br>\nUnderflow는 지정된 정수형(uint)의 최솟값보다 작아졌을 때 발생한다.\r\nSolidity에서는 unsigned Integer(uint)를 자주 사용한다. uint256을 기준으로 했을때 최대값은 2<sup>256</sup>-1이고 최소값은 0이다. 즉 2<sup>256</sup>-1에 1을 더했을때 Overflow 0에서 1을 뺐을때 underflow가 일어날 것이다.</p>\n<p>ExampleColde를 보면 보다 쉽게 이해 할 수 있을 것이다.</p>\n<hr>\n<h2 id=\"example-code\" style=\"position:relative;\"><a href=\"#example-code\" aria-label=\"example code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example Code</h2>\n<p>remix IDE에서 실습을 진행한다면 이해가 더욱 빠를것이다!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\r\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.7.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.8.0 이전 버전이어야함!</span>\r\n\r\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">OverflowUnderFlow</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token builtin\">int256</span> <span class=\"token keyword\">public</span> zero <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> max <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">256</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    \r\n    <span class=\"token comment\">// zero will end up at 2**256-1</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">underflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        zero <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">// max will end up at 0</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">overflow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\r\n        max <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><span style=\"color:grey\">출처: <a href=\"https://medium.com/loom-network-korean/%EC%8A%A4%EB%A7%88%ED%8A%B8-%EC%BB%A8%ED%8A%B8%EB%9E%99%ED%8A%B8%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%ED%98%B8%ED%95%A0-%EA%B2%83%EC%9D%B8%EA%B0%80-%EC%86%94%EB%A6%AC%EB%94%94%ED%8B%B0%EC%9D%98-6%EA%B0%80%EC%A7%80-%EC%B7%A8%EC%95%BD%EC%A0%90-%EB%B0%8F-%EB%8C%80%EB%B9%84%EC%B1%85-1%EB%B6%80-c21d4e37034a\">https://medium.com/loom-network-korean/스마트-컨트랙트를-어떻게-보호할-것인가-솔리디티의-6가지-취약점-및-대비책-1부</a></span></p>\n<p>위 코드는 0.8.0 이전 버전들에게는 위험한 코드이다. zero에서 underflow function을 실행기키면 -1로 바뀌는 것이 아닌 2<sup>256</sup>-1로 바뀌게 된다. 만약 이 코드가 erc20와 같은 토큰을 다루는 코드였다면 큰 손실을 입을수도 있다.\r\nOverflow도 마찬가지로 max(2<sup>256</sup>-1) + 1을 하면 2<sup>256</sup>이 아닌 0으로 바뀌게 된다.</p>\n<hr>\n<h2 id=\"어떻게-overflow와-underflow를-예방할-수-있을까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-overflow%EC%99%80-underflow%EB%A5%BC-%EC%98%88%EB%B0%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"어떻게 overflow와 underflow를 예방할 수 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떻게 overflow와 underflow를 예방할 수 있을까?</h2>\n<p>openzeppline의 SafeMath 같은 라이브러리를 사용하는 것이 가능 보편화되어있다.</p>\n<hr>\n<h2 id=\"080-이후-버전에서는-어떻게-다른가\" style=\"position:relative;\"><a href=\"#080-%EC%9D%B4%ED%9B%84-%EB%B2%84%EC%A0%84%EC%97%90%EC%84%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EA%B0%80\" aria-label=\"080 이후 버전에서는 어떻게 다른가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0.8.0 이후 버전에서는 어떻게 다른가?</h2>\n<p>0.8.0 이후 버전에서는 위와 같은 코드를 작성해도 문제가 되지 않는다. 0.8.0 이후 버전은 underflow 또는 overflow가 일어나면 즉시 revert 해버리기 때문이다. 그래서 따로 safe math와 같은 라이브러리를 사용 할 필요가 없다.</p>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>overflow와 underflow는 다른 언어를 배우면서 배웠던 것이라 개념 자체는 쉬웠다.\r\n다음 포스트에서는 <strong>짧은 주소 공격</strong> 에 대해서 다루어 볼 예정이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84\">들어가기 전</a></li>\n<li><a href=\"#overflow%EC%99%80-underflow%EB%9E%80\">OverFlow와 UnderFlow란</a></li>\n<li><a href=\"#example-code\">Example Code</a></li>\n<li><a href=\"#%EC%96%B4%EB%96%BB%EA%B2%8C-overflow%EC%99%80-underflow%EB%A5%BC-%EC%98%88%EB%B0%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C\">어떻게 overflow와 underflow를 예방할 수 있을까?</a></li>\n<li><a href=\"#080-%EC%9D%B4%ED%9B%84-%EB%B2%84%EC%A0%84%EC%97%90%EC%84%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EA%B0%80\">0.8.0 이후 버전에서는 어떻게 다른가?</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 21, 2021","title":"(취약점 시리즈 2) Over & Under Flow?","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/smart_contract/overunderflow/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/smart_contract/blockTimestamp/","nextSlug":"/smart_contract/overunderflow/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}