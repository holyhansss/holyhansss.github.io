{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/evm/",
    "result": {"data":{"cur":{"id":"b1747e78-df12-5900-95c5-2c26d5a5a44b","html":"<h1 id=\"-evmethereum-virtual-machine-그게-뭔데\" style=\"position:relative;\"><a href=\"#-evmethereum-virtual-machine-%EA%B7%B8%EA%B2%8C-%EB%AD%94%EB%8D%B0\" aria-label=\" evmethereum virtual machine 그게 뭔데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 EVM(Ethereum Virtual Machine)? 그게 뭔데?</h1>\n<p>solidity로 smart contract를 작성하면서 <strong>gas optimization</strong> 등에 대해 깊이 알기위해 EVM을 공부를 시작하였다!</p>\n<h2 id=\"1-virtual-machine\" style=\"position:relative;\"><a href=\"#1-virtual-machine\" aria-label=\"1 virtual machine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Virtual Machine?</h2>\n<p>먼저 Virtual Machine(가상 머신)이란 뭘까?<br>\n가상머신이란 물리적으로 존재하는 컴퓨터는 아니지만 실제 컴퓨터처럼 작동하는 소프트웨어이다. 가상머신을 사용하게 되면 하나의 컴퓨터로 2가지 이상의 운영체제를 실행 할 수 있고, 상호간 충돌을 없앨 수 있다.<br>\n나는 우분투를 사용했었는데, 역시 사용하면서 배우는게 최고인 것 같다.</p>\n<h2 id=\"2-evmethereum-virtual-machine\" style=\"position:relative;\"><a href=\"#2-evmethereum-virtual-machine\" aria-label=\"2 evmethereum virtual machine permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. EVM(Ethereum Virtual Machine)</h2>\n<p>이더리움 노드들이 공유하는 하나의 가상 머신이다. 모두가 다 같이 사용하기에 “World Computer”이라고도 불린다. 그리고 스마트 컨트랙트의 배포와 실행을 처리하는 이더리움의 일부이다. EVM안에 배포된 코드는 다른 프로세스들과 완전히 격리되어있다.EVM의 역할은 데이터의 변화, 변경하는 데이터의 충돌과 보안을 담당한다.</p>\n<h2 id=\"3-accounts란\" style=\"position:relative;\"><a href=\"#3-accounts%EB%9E%80\" aria-label=\"3 accounts란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Accounts란?</h2>\n<p>두가지 종류의 계정(Accounts)가 존재한다. 두 계정에는 모두 ether를 보관할 수 있다. Account는 종류에 불문하고 4가지로 구성되어있다.</p>\n<ol>\n<li>Nonce</li>\n<li>Balance</li>\n<li>storageRoot</li>\n<li>CodeHash</li>\n</ol>\n<ul>\n<li>EOA(Externally Owned Accounts)</li>\n</ul>\n<p>EOA는 Private Key를 통해 관리된다. 그렇기 때문에 private key가 있다면 EOA를 언제나 다시 생성할 수 있고, 서명을 통해 transaction을 보낼 수 있다.</p>\n<ul>\n<li>CA(Contract Account)</li>\n</ul>\n<p>CA는 smart contract를 통해 관리된다. smart wallet이라고도 불리운다. smart contract로 관리되기 때문에 EOA 또는 다른 contract에서 보내는 transaction과 메세지를 통해 실행될 수 있다. 결국 모든 transaction은 EOA로부터 시작된다.</p>\n<p>두가지 계정이 존재하지만 EVM에서는 동일하게 취급한다.</p>\n<h2 id=\"transaction이란\" style=\"position:relative;\"><a href=\"#transaction%EC%9D%B4%EB%9E%80\" aria-label=\"transaction이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Transaction이란?</h2>\n<p>이더리움에서 Transcation이란 서명된 <strong>데이터 페키지이다.</strong> 데이터 페키지에는 nonce, to, signature, value, data(optional), gaslimit, gasprice에 대한 정보 등이 저장되어있다.<br>\nether를 계정들에게 보내거나, smart contract 배포하거나 함수를 호출할때 사용된다.</p>\n<h2 id=\"message란\" style=\"position:relative;\"><a href=\"#message%EB%9E%80\" aria-label=\"message란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Message란?</h2>\n<p>메세지는 Transaction과 <strong>EOA가 아닌 contract가</strong> 생성한다는 것 외에 굉장히 비슷하다. 큰 차이점은 Gas Limit를 설정할 필요가 없다는 것이다. EOA가 처음 Transaction을 보낼때 이미 설정하기 때문이다. 결국 EOA가 Transaction을 보내지 않는다면 Message는 생성될 수 없다.</p>\n<h2 id=\"gas란\" style=\"position:relative;\"><a href=\"#gas%EB%9E%80\" aria-label=\"gas란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas란?</h2>\n<p>Gas는 정해져있는 연산 비용이다. 즉 많은 연산을 할 수록 많은 gas가 소모된다. 총 수수료는 <strong>Gas Price * Gas의 총 양</strong> 으로 결정된다. 만약 해커카 DOS 공격을 시도한다면 transaction에 비례해 gas를 지불해야한다.\r\n그렇기 때문에 Gas는 이더리움에 꼭 필요한 요소중 하나라고 생각한다. Gas limit과 gas price를 통해 anti-Dos모델을 유지시킬 수 있다.</p>\n<hr>\n<p>처음으로 내가 공부한 내용을 글로 담아보았다. 아마 설명이 부족한 부분이 많았으리라고 생각한다. 앞으로 많은 글을 쓰며 더 공부하고 공부한 것을 잘 설명하고 싶다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-virtual-machine\">1. Virtual Machine?</a></li>\n<li><a href=\"#2-evmethereum-virtual-machine\">2. EVM(Ethereum Virtual Machine)</a></li>\n<li><a href=\"#3-accounts%EB%9E%80\">3. Accounts란?</a></li>\n<li><a href=\"#transaction%EC%9D%B4%EB%9E%80\">Transaction이란?</a></li>\n<li><a href=\"#message%EB%9E%80\">Message란?</a></li>\n<li><a href=\"#gas%EB%9E%80\">Gas란?</a></li>\n</ul>\n</div>","excerpt":"👋 EVM(Ethereum Virtual Machine)? 그게 뭔데? solidity로 smart contract를 작성하면서 gas optimization 등에 대해 깊이 알기위해 EVM을 공부를 시작하였다! 1. Virtual Machine? 먼저 Virtual Machine(가상 머신)이란 뭘까? 가상머신이란 물리적으로 존재하는 컴퓨터는 아니지만 실제 컴퓨터처럼 작동하는 소프트웨어이다. 가상머신을 사용하게 되면 하나의 컴퓨터로 2가지 이상의 운영체제를 실행 할 수 있고, 상호간 충돌을 없앨 수 있다. 나는 우분투를 사용했었는데, 역시 사용하면서 배우는게 최고인 것 같다. 2. EVM(Ethereum Virtual Machine) 이더리움 노드들이 공유하는 하나의 가상 머신이다. 모두가 다 같이 사용하기에 “World Computer”이라고도 불린다. 그리고 스마트 컨트랙트의 배포와 실행을 처리하는 이더리움의 일부이다. EVM안에 배포된 코드는 다른 프로세스들과 완전히 격리되…","frontmatter":{"date":"December 13, 2021","title":"EVM(Ethereum Virtual Machine)? 그게 뭔데?","categories":"ethereum","author":"한성원","emoji":"🧢"},"fields":{"slug":"/evm/"}},"next":{"id":"b1d8d626-9e8c-56e1-9d4c-bbd3bb5e03ea","html":"<h1 id=\"-블로그를-시작한-이유\" style=\"position:relative;\"><a href=\"#-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\" 블로그를 시작한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 블로그를 시작한 이유?</h1>\n<h2 id=\"1-배운것에-대한-내용-정리\" style=\"position:relative;\"><a href=\"#1-%EB%B0%B0%EC%9A%B4%EA%B2%83%EC%97%90-%EB%8C%80%ED%95%9C-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC\" aria-label=\"1 배운것에 대한 내용 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 배운것에 대한 내용 정리</h2>\n<p>무언가를 배우고 글로 남기는 것이 굉장히 중요하다고 생각한다. 블로그를 통해 앞으로 배울 것 들에 대한 기록을 남기고 싶어 시작한다.</p>\n<h2 id=\"2-내-생각-정리--글쓰는-법\" style=\"position:relative;\"><a href=\"#2-%EB%82%B4-%EC%83%9D%EA%B0%81-%EC%A0%95%EB%A6%AC--%EA%B8%80%EC%93%B0%EB%8A%94-%EB%B2%95\" aria-label=\"2 내 생각 정리  글쓰는 법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 내 생각 정리 &#x26; 글쓰는 법</h2>\n<p>내가 배운 것과 생각을 잘 정리해 글로 나타내고 전달하는 것은 어렵다. 블로그를 통해 <strong>의사소통</strong> 에 중요한 정확한 정보 정리 및 전달을 배우고 싶다.</p>\n<h1 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>앞으로 블로그에는 개발 관련 공부 자료 및 내가 했던 경험에 대해 정리해 업로드 할 예정이다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-%EB%B0%B0%EC%9A%B4%EA%B2%83%EC%97%90-%EB%8C%80%ED%95%9C-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC\">1. 배운것에 대한 내용 정리</a></li>\n<li><a href=\"#2-%EB%82%B4-%EC%83%9D%EA%B0%81-%EC%A0%95%EB%A6%AC--%EA%B8%80%EC%93%B0%EB%8A%94-%EB%B2%95\">2. 내 생각 정리 &#x26; 글쓰는 법</a></li>\n</ul>\n</div>","frontmatter":{"date":"December 07, 2021","title":"블로그를 시작한 이유?","categories":"feature","author":"한성원","emoji":"🧢"},"fields":{"slug":"/startingBlog/"}},"prev":{"id":"bbced782-f109-5c42-9522-c570827ac521","html":"<h1 id=\"-reentrancy-attack-재진입-공격\" style=\"position:relative;\"><a href=\"#-reentrancy-attack-%EC%9E%AC%EC%A7%84%EC%9E%85-%EA%B3%B5%EA%B2%A9\" aria-label=\" reentrancy attack 재진입 공격 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Reentrancy Attack (재진입 공격)</h1>\n<h2 id=\"들어가기전\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%A0%84\" aria-label=\"들어가기전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기전</h2>\n<h3 id=\"fallback-함수\" style=\"position:relative;\"><a href=\"#fallback-%ED%95%A8%EC%88%98\" aria-label=\"fallback 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fallback 함수?</h3>\n<p>Fallback 함수는 contract에서 함수를 실행시킬때 함수가 존재하지 않는다면 실행되는 function이다.\r\n0.6이전 버전에서는 fallback이 ether는 것과 존재하지 않는 함수의 대비책으로 사용되었지만 0.6 이후 버전부터 fallback은 fallback과 receive로 나누어졌다. 0.6부터는 fallback을 사용하지 않고 receive를 통해 이더를 받을 수 있다.</p>\n<h2 id=\"reentrancy-attack재진입-공격이란\" style=\"position:relative;\"><a href=\"#reentrancy-attack%EC%9E%AC%EC%A7%84%EC%9E%85-%EA%B3%B5%EA%B2%A9%EC%9D%B4%EB%9E%80\" aria-label=\"reentrancy attack재진입 공격이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reentrancy Attack(재진입 공격)이란?</h2>\n<p>Reentrancy Attack은 contract A가 하나의 user로써 contract B 에게 transaction을 보낸다. 이때 contract A가 요청에 대한 제어권을 가지게된다. 그렇게 되면 contract A가 보낸 첫번째 요청이 끝나기 전에 다른 함수를 계속해서 호출 할 수 있게된다. 이는 재진입을 ether를 빼올 수 있게 된다.</p>\n<h2 id=\"example-code\" style=\"position:relative;\"><a href=\"#example-code\" aria-label=\"example code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example Code</h2>\n<p>예시를 하나 보도록 하자!\r\n첫번째 contract A는 ether를 보관하는 곳\r\n두번째 contract B는 A를 공격하는 contract이다.</p>\n<p>그대로 remix를 사용해 테스트해보면 이해가 빠를 것이다!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">\r\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">EtherStore</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> balances<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\r\n        balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">uint</span> bal <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>bal <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> sent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> bal<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to send Ether\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Attack</span> <span class=\"token punctuation\">{</span>\r\n    EtherStore <span class=\"token keyword\">public</span> etherStore<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _etherStoreAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        etherStore <span class=\"token operator\">=</span> <span class=\"token function\">EtherStore</span><span class=\"token punctuation\">(</span>_etherStoreAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// Fallback is called when EtherStore sends Ether to this contract.</span>\r\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>etherStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            etherStore<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        etherStore<span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        etherStore<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// Helper function to check the balance of this contract</span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><span style=\"color:grey\">출처: <a href=\"https://solidity-by-example.org/hacks/re-entrancy/\">https://solidity-by-example.org/hacks/re-entrancy/</a></span></li>\n</ul>\n<p><strong>EtherStore contract</strong> 를 보면 deposit과 withdraw 함수가 존재한다.</p>\n<ul>\n<li>deposit 함수를 원하는 만큼의 ether를 보관할 수 있게 해주는 함수이다.</li>\n<li>withdraw 함수는 자신이 보관한 ether를 가져올 수 있는 함수이다.</li>\n</ul>\n<p><strong>Attack contract</strong> 에는 attack과 fallback함수가 존재한다.</p>\n<ul>\n<li>attack 함수는 ether 하나를 deposit하고 이후 바로 withdraw 한다</li>\n<li>fallback 함수에는 ether가 1이상 보관되어 있다면 withdraw함수를 다시 부른다.</li>\n</ul>\n<p>함수가 호출되는 순서는 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Attack.attack\r\n- EtherStore.deposit\r\n- EtherStore.withdraw\r\n- Attack fallback (receives 1 Ether)\r\n- EtherStore.withdraw\r\n- Attack.fallback (receives 1 Ether)\r\n- EtherStore.withdraw\r\n- Attack fallback (receives 1 Ether)\r\n- ...(이후 반복)</code></pre></div>\n<ol>\n<li>공격자가 attack 함수를 통해 EtherStore에 1 ether를 deposit한다</li>\n<li>이후 EtherStore에 1 ether를 찾겠다고 withdraw 함수를 호출한다.</li>\n<li>withdraw 함수가 호출되면 attack 함수의 fallback function이 호출된다.(이더를 가져오기 때문에!)</li>\n<li>이후 fallback function 안에 있는 withdraw함수를 재호출 하게된다.</li>\n<li>이후 3-4 과정이 반복되며 재진입 공격이 성공한다.</li>\n</ol>\n<p>이처럼 재진입 공격을 통해 부당한 이득을 취할 수 있게된다.</p>\n<h2 id=\"reentrancy-attack재진입-공격-dao\" style=\"position:relative;\"><a href=\"#reentrancy-attack%EC%9E%AC%EC%A7%84%EC%9E%85-%EA%B3%B5%EA%B2%A9-dao\" aria-label=\"reentrancy attack재진입 공격 dao permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reentrancy Attack(재진입 공격) DAO?</h2>\n<p>Reentrancy Attack은 DAO</p>\n<h2 id=\"how-to-prevent\" style=\"position:relative;\"><a href=\"#how-to-prevent\" aria-label=\"how to prevent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to prevent?</h2>\n<p>그렇다면 reentrency attack은 어떻게 예방 할 수 있을까?</p>\n<p>Reentrency attack은 예방하는 방법은 총 2가지로 나눌 수 있다.</p>\n<ol>\n<li>\n<p>openzeppline의 ReentrancyGuard contract의 noReentrant modifier 사용하기</p>\n<ul>\n<li>openzeppline Library는 secure smart contract 개발을 위한 Library이다.</li>\n<li>noReentrant modifier의 코드는 이러하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\">    <span class=\"token keyword\">modifier</span> <span class=\"token function\">nonReentrant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// On the first call to nonReentrant, _notEntered will be true</span>\r\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_status <span class=\"token operator\">!=</span> _ENTERED<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ReentrancyGuard: reentrant call\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// Any calls to nonReentrant after this point will fail</span>\r\n    _status <span class=\"token operator\">=</span> _ENTERED<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// By storing the original value once again, a refund is triggered (see</span>\r\n    <span class=\"token comment\">// https://eips.ethereum.org/EIPS/eip-2200)</span>\r\n    _status <span class=\"token operator\">=</span> _NOT_ENTERED<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 뒤에 noReentrant를 붙혀주는 것으로 쉬게 사용 가능하다.</p>\n</li>\n<li>\n<p>Check-Effects-Interaction 패턴</p>\n</li>\n</ol>\n<ul>\n<li>함수 내에서 interaction이 일어나기 전 check와 effect를 다 적용하는 패턴이다. 위 예제의 withdraw 함수 같은 경우 effect 부분이 interaction 부분 다음에 있는 것을 볼 수 있다.</li>\n<li>Check-Effects-Interaction 패턴을 적용하게 되면 interaction하기 전에 먼저 balance에 대한 데이터가 바뀜으로 reentrency하게 되어도 require문에 걸리게 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token builtin\">uint</span> bal <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>bal <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n      <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> sent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> bal<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// interaction 부분!!</span>\r\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to send Ether\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n      balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// effect!!</span>\r\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h2>\n<p>“블록체인은 해킹 당하지 않는다!” 라는 것은 맞는 말이지만 블록체인 위에서 만들어지는 smart contract는 그렇지 않다. 코드를 조금이라도 잘못 짜게되면 Reentrency attack과 많은 취약점들이 생길 수 있다. 그럼으로 앞으로 취약점들에 대해 공부해 smart contract를 만들때 유의하도록 하자!!</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%A0%84\">들어가기전</a></p>\n<ul>\n<li><a href=\"#fallback-%ED%95%A8%EC%88%98\">Fallback 함수?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reentrancy-attack%EC%9E%AC%EC%A7%84%EC%9E%85-%EA%B3%B5%EA%B2%A9%EC%9D%B4%EB%9E%80\">Reentrancy Attack(재진입 공격)이란?</a></p>\n</li>\n<li>\n<p><a href=\"#example-code\">Example Code</a></p>\n</li>\n<li>\n<p><a href=\"#reentrancy-attack%EC%9E%AC%EC%A7%84%EC%9E%85-%EA%B3%B5%EA%B2%A9-dao\">Reentrancy Attack(재진입 공격) DAO?</a></p>\n</li>\n<li>\n<p><a href=\"#how-to-prevent\">How to prevent?</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"December 15, 2021","title":"Reentrancy Attack (재진입 공격)?","categories":"SmartContractVulnerabilities","author":"한성원","emoji":"🧢"},"fields":{"slug":"/smart_contract/reentrancy_attack/"}},"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/evm/","nextSlug":"/startingBlog/","prevSlug":"/smart_contract/reentrancy_attack/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}