{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/EVM",
    "result": {"pageContext":{"currentCategory":"EVM","categories":["All","~feature~","EVM","취약점분석","solidity","Defi","NFT","나","ethereum"],"edges":[{"node":{"id":"afda7ff8-38b8-52ad-b0e4-a956a80a73d7","excerpt":"RLP Encoding && Decoding Recursive Length Prefix RLP는 직렬화(serialization) 기법으로 이더리움 네트워크에서 통신을 주고 받을 때 사용된다. 이더리움의 데이터는 RLP로 통일되어있고, transaction 전송, 블록 state, receipt 저장, DB 저장 등에 사용된다. RLPEncode와 RLPDecode를 하는 규칙은 각각 5가지 방법이 존재하며, item이라는 단위를 사용하고 있다. RLP Encode 1 Byte Data 1 byte data 는 ASCCI 코드를 그대로 사용한다. 즉, [0x00~0x7f] 사이의 값이다. RLP(”0x01”) = 0x01 RLP(”a”) = 0x61 String Data (0 ~ 55 bytes) String Data의 길이가 0~55 bytes인 경우, 0x80 + String Data의 Length 값을 첫번째 byte로 사용한다. 즉, 첫번째 byte는 [0x80 ~ 0xb7…","fields":{"slug":"/EVM/RLP Encoding && Decoding/"},"frontmatter":{"categories":"EVM","title":"RLP Encodeing && RLP Decoding","date":"January 17, 2023"}},"next":{"fields":{"slug":"/CTFs/DamnVulnerableDefi/DamnVulnerableDefi_WriteUp/"}},"previous":{"fields":{"slug":"/allSeries/"}}},{"node":{"id":"ab3111c4-c20f-5e43-9e88-e6646a7d2d94","excerpt":"👋 Solidity Storage Layout For Proxy Contracts and Diamonds 이 글은 내가 공부하면서 찾은 이 글을 변역하였다. 이 글은 Ethernaut의 24번 Puzzle Wallet을 풀때 공부했던 것을 봤다. 이 글을 읽기 위해서는 proxy contract에 대한 사전지식이 필요하다. 또한 이 글은 Diamond standard의 저자인 NickMudge의 글이며, Proxy contract의 Storage Layout과 Diamond standard에 대해서 다룬다. 글에는 내가 생각하는 부분이 포함되어있을 수도 있기 때문에, 내 글이 이해가 잘 되지 않는다면 원문을 읽어보는 것을 추천한다. 시작 은 contract의 상태 변수가 에 저장되는 방법과 저장되는 위치이다. 은 우리가 평상시에 contract를 작성할 때는 고려하지 않아도 괜찮다. 왜냐하면 Solidity compiler가 알아서 처리해주기 때문이다. 하지만  또는 를 작성할때는…","fields":{"slug":"/EVM/StorageLayoutForProxy/"},"frontmatter":{"categories":"EVM","title":"Solidity Storage Layout For Proxy Contracts and Diamonds","date":"February 16, 2022"}},"next":{"fields":{"slug":"/CTFs/24_PuzzleWallet_etheranut/24_PuzzleWallet_etheranut/"}},"previous":{"fields":{"slug":"/about_me/리더가 되었다/리더가되었다/"}}},{"node":{"id":"fa6d3ef1-e3fd-5cac-80a5-f8e590899c33","excerpt":"👋 Solidity Bytecode and Opcode Basics 이 글은 내가 공부하면서 찾은 이 글을 변역하였다. 이 글은 ethernaut의 magicnumber의 저자가 작성한 글이며 bytecode와 opcode의 기본기에 대해서 다룬다. 나는 ethernaut 문제풀면서 이 개념에 접근하게 되었으며 공부하게 되었다. 글에는 내가 생각하는 부분이 포함되어있을 수도 있기 때문에, 내 글이 이해가 잘 되지 않는다면 원문을 읽어보는 것을 추천한다. 이미지 같은 경우 내가 공부하면서 얻은 최신이미지로 대체하였다. 시작 smart contract에 대해서 깊게 공부하면 할 수록 , ,  등과 같은 용어를 사용하게 될 것이다. 이러한 용어들은 무엇이고 우리는 그 용어들에 대해 알아야할까? 이러한 용어를 알기 위해서는 이더리움 가상 머신(EVM)에 더 깊이 배워야 한다. 나는 이 주제에 대해 구글에 검색해 보았지만 관련 자료가 너무 적어 놀랐다. 아마 너 기술적 이어서일까? 그래서 …","fields":{"slug":"/EVM/SolidityBytecodeandOpcodeBasics/"},"frontmatter":{"categories":"EVM","title":"Solidity Bytecode and Opcode Basics","date":"January 27, 2022"}},"next":{"fields":{"slug":"/CTFs/17_recovery_ethernaut/17_recovery_ethernaut/"}},"previous":{"fields":{"slug":"/about_me/impression_30posts/impression_1/"}}},{"node":{"id":"065423f4-bed9-5958-a2c3-debdac2ece19","excerpt":"👋 EVM(Ethereum Virtual Machine)? 그게 뭔데? solidity로 smart contract를 작성하면서 gas optimization 등에 대해 깊이 알기위해 EVM을 공부를 시작하였다! 1. Virtual Machine? 먼저 Virtual Machine(가상 머신)이란 뭘까? 가상머신이란 물리적으로 존재하는 컴퓨터는 아니지만 실제 컴퓨터처럼 작동하는 소프트웨어이다. 가상머신을 사용하게 되면 하나의 컴퓨터로 2가지 이상의 운영체제를 실행 할 수 있고, 상호간 충돌을 없앨 수 있다. 나는 우분투를 사용했었는데, 역시 사용하면서 배우는게 최고인 것 같다. 2. EVM(Ethereum Virtual Machine) 이더리움 노드들이 공유하는 하나의 가상 머신이다. 모두가 다 같이 사용하기에 “World Computer”이라고도 불린다. 그리고 스마트 컨트랙트의 배포와 실행을 처리하는 이더리움의 일부이다. EVM안에 배포된 코드는 다른 프로세스들과 완전히 격리되…","fields":{"slug":"/EVM/evm/"},"frontmatter":{"categories":"EVM","title":"EVM과 Transaction","date":"December 13, 2021"}},"next":{"fields":{"slug":"/startingBlog/"}},"previous":{"fields":{"slug":"/vulnerability/reentrancy_attack/reentrancy_attack/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}