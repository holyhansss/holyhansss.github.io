{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/",
    "result": {"data":{"cur":{"id":"212bbcd2-dbe0-5ff5-bac8-3e44c8ba8474","html":"<h1 id=\"-privacy\" style=\"position:relative;\"><a href=\"#-privacy\" aria-label=\" privacy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 Privacy</h1>\n<p><strong>Difficulty 8/10</strong></p>\n<ul>\n<li>승리 조건</li>\n<li>코드 분석</li>\n<li>풀이</li>\n</ul>\n<p>순서로 진행 될 것이다.</p>\n<hr>\n<h2 id=\"승리-조건\" style=\"position:relative;\"><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\" aria-label=\"승리 조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>승리 조건</h2>\n<ul>\n<li>contract를 unlock 하기!</li>\n<li>즉 변수 locked를 false로 만들기</li>\n</ul>\n<hr>\n<h2 id=\"코드-분석\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\" aria-label=\"코드 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 분석</h2>\n<p>분석은 주석에!</p>\n<div class=\"gatsby-highlight\" data-language=\"solidity\"><pre class=\"language-solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Privacy</span> <span class=\"token punctuation\">{</span>\r\n    \r\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// slot 0</span>\r\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> ID <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// slot 1</span>\r\n    <span class=\"token builtin\">uint8</span> <span class=\"token keyword\">private</span> flattening <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// slot 2</span>\r\n    <span class=\"token builtin\">uint8</span> <span class=\"token keyword\">private</span> denomination <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// slot 2</span>\r\n    <span class=\"token builtin\">uint16</span> <span class=\"token keyword\">private</span> awkwardness <span class=\"token operator\">=</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// slot 2</span>\r\n    <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// slot 3,4,5</span>\r\n\r\n    <span class=\"token comment\">//constructor: set data</span>\r\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        data <span class=\"token operator\">=</span> _data<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    \r\n    <span class=\"token comment\">// key를 가지고 unlock 할 수 있는 function </span>\r\n    <span class=\"token keyword\">function</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes16</span> _key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// _key와 bytes16(data[2])의 값이 같은지 확인한다.</span>\r\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_key <span class=\"token operator\">==</span> <span class=\"token builtin\">bytes16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// unlock 한다.</span>\r\n        locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">/*\r\n        A bunch of super advanced solidity algorithms...\r\n\r\n        ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`\r\n        .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,\r\n        *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\\\r\n        `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)\r\n        ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU\r\n    */</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<hr>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>이 문제에서 우리의 목표는 Privacy contract를 locked 변수를 false로 만드는 것이다.</p>\n<p><a href=\"https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/\">Ethernaut 8 Vault</a>와 비슷하다고 생각한다.</p>\n<p>이 문제를 풀기전에 우리가 알아야 하는 것들이 있다.</p>\n<ul>\n<li>Storage</li>\n<li>casting</li>\n</ul>\n<p>에 대해서 확실하게 알아야 한다.\r\nVault에서도 설명했지만 한번 더 storage에 대해서 설명하겠다.\r\nEVM의 Storage는 2^256개의 메모리 슬롯을 가지고 있다. 그리고 각 slot은 32 bytes( = 256 bits)의 크기이다. 하나의 slot에 여러가지 변수를 저정할 수 있다. 하지만 변수 선언 순서에 따라 slot 할당이 달라지니 유의하자! 아래의 예시처럼 uint8, uint256, uint8은 3개를 차지하지만 uint8, uint8, uint256은 슬롯 2개 밖에 차지하지 않는다.  Gas optimization을 위해서는 우리가 꼭 알고 있어야할 내용이다!\r\n<code class=\"language-text\">solidity\r\n    uint8 a // slot 0\r\n    uint256 b // slot 1\r\n    uint8 c // slot 2\r\n    </code>\r\n<code class=\"language-text\">solidity\r\n    uint8 a // slot 0\r\n    uint8 b // slot 0\r\n    uint256 c // slot 1\r\n    </code>\r\n<a href=\"https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183\">이 글</a>에 설명이 잘 되어있으니 한번 확인해 보자! 이 글에서는 casting에 대해서도 다루고 있으니 꼭 보고 오는 것을 추천한다.</p>\n<p>우리는 이 문제를 풀기 위해 web3.eth.getStorageAt() method를 사용한다. web3.eth.getStorageAt를 통해 우리는 lowlevel에서 storage data를 불러올 수 있다.</p>\n<p>우선 console 창에서 실행시킨다\r\nctrl + shift + i를 눌러 console창을 활성화 시키자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// locked가 true로 lock된 것을 알 수 있다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">locked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// 코드 분석에서 봤듯이 data[2]는 5 번째 slot에 저장되어있다.</span>\r\n<span class=\"token keyword\">await</span> web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span><span class=\"token function\">getStorageAt</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0x3aa30e05517b3f1490c335bb41be74713b0568225baaad3b56642e103a3b4335</span>\r\n\r\n<span class=\"token comment\">// 우리는 16bytes 만 필요하기 때문에 반을 뚝 잘라 앞부분만 사용한다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x3aa30e05517b3f1490c335bb41be7471\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\">// locked가 false로 바뀐 것을 확인 할 수 있다.</span>\r\n<span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">locked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이후 Submit instance를 누르고 조금 기다리면 block이 mine되고, 아래와 같이 뜨며 마무리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">٩(- ̮̮̃-̃)۶ Well done, You have completed this level!!!</code></pre></div>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>블록체인상의 정보는 모두에게 공개된다. 모든 사람이 storage를 쉽게 확인 할 수 있기 때문이다. 민감한 정보들은 블록체인에 올리지 않는 것이 좋다. 또한 변수 선언 순서에 따라 때로는 더 많은 비용를 지불해야 할 수도 있기 때문에 코드를 적을때 항상 최적화에 대해 생각하며 하자!!</p>\n<hr>\n<h2 id=\"기타-정보\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\" aria-label=\"기타 정보 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기타 정보</h2>\n<ul>\n<li>rinkeyb network ether faucet: <a href=\"https://faucets.chain.link/rinkeby\">https://faucets.chain.link/rinkeby</a></li>\n<li>ethernaut: <a href=\"https://ethernaut.openzeppelin.com/\">https://ethernaut.openzeppelin.com/</a></li>\n<li>remix IDE: <a href=\"https://remix.ethereum.org\">https://remix.ethereum.org</a></li>\n<li>Ethernaut 8 Vault: <a href=\"https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/\">https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/</a></li>\n<li>Storage &#x26; Casting: <a href=\"https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183\">https://medium.com/coinmonks/solidity-variables-storage-type-conversions-and-accessing-private-variables-c59b4484c183</a></li>\n<li>Privacy 취약점: <a href=\"https://holyhansss.github.io/vulnerability/private_variable/private_variable/\">https://holyhansss.github.io/vulnerability/private_variable/private_variable/</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%8A%B9%EB%A6%AC-%EC%A1%B0%EA%B1%B4\">승리 조건</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C-%EB%B6%84%EC%84%9D\">코드 분석</a></li>\n<li><a href=\"#%ED%92%80%EC%9D%B4\">풀이</a></li>\n<li><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"#%EA%B8%B0%ED%83%80-%EC%A0%95%EB%B3%B4\">기타 정보</a></li>\n</ul>\n</div>","excerpt":"👋 Privacy Difficulty 8/10 승리 조건 코드 분석 풀이 순서로 진행 될 것이다. 승리 조건 contract를 unlock 하기! 즉 변수 locked를 false로 만들기 코드 분석 분석은 주석에! 풀이 이 문제에서 우리의 목표는 Privacy contract를 locked 변수를 false로 만드는 것이다. Ethernaut 8 Vault와 비슷하다고 생각한다. 이 문제를 풀기전에 우리가 알아야 하는 것들이 있다. Storage casting 에 대해서 확실하게 알아야 한다.\r\nVault에서도 설명했지만 한번 더 storage에 대해서 설명하겠다.\r\nEVM의 Storage는 2^256개의 메모리 슬롯을 가지고 있다. 그리고 각 slot은 32 bytes( = 256 bits)의 크기이다. 하나의 slot에 여러가지 변수를 저정할 수 있다. 하지만 변수 선언 순서에 따라 slot 할당이 달라지니 유의하자! 아래의 예시처럼 uint8, uint256, uint8은 …","frontmatter":{"date":"January 14, 2022","title":"(Ethernaut 취약점 12) Privacy","categories":"취약점분석","author":"한성원","emoji":"🧢"},"fields":{"slug":"/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/"}},"next":{"id":"215ce45f-a0f2-56b0-9e68-03c15217730c","html":"<h1 id=\"-시리즈-별-정리\" style=\"position:relative;\"><a href=\"#-%EC%8B%9C%EB%A6%AC%EC%A6%88-%EB%B3%84-%EC%A0%95%EB%A6%AC\" aria-label=\" 시리즈 별 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👋 시리즈 별 정리</h1>\n<p>시리즈 별로 보기 편하게 정리해두었다!</p>\n<h2 id=\"취약점-시리즈\" style=\"position:relative;\"><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"취약점 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>취약점 시리즈</h2>\n<ul>\n<li><a href=\"https://holyhansss.github.io/vulnerability/reentrancy_attack/reentrancy_attack/\">취약점 시리즈 1 Reentrancy Attack 재진입 공격</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/over_under_flow/over_under_flow/\">취약점 시리즈 2 Overflow &#x26; Underflow</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/block_timestamp/block_timestamp/\">취약점 시리즈 3 block.timestamp</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/delegate_call/delegate_call/\">취약점 시리즈 4 Delegate Call</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/front_running/front_running/\">취약점 시리즈 5 Front Running</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_unexpected_revert/dos_unexpected_revert/\">취약점 시리즈 6 DOS With Unexpected Revert</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/dos_with_block_gas_limit/dos_block_gas_limit/\">취약점 시리즈 7 DOS With Block Gas Limit</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/tx.origin/tx_origin/\">취약점 시리즈 8 tx.origin</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/selfdestruct/selfdestruct/\">취약점 시리즈 9 Self Destruct</a></li>\n<li><a href=\"https://holyhansss.github.io/vulnerability/private_variable/private_variable/\">취약점 시리즈 10 Private</a></li>\n</ul>\n<h2 id=\"ethernaut-시리즈\" style=\"position:relative;\"><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\" aria-label=\"ethernaut 시리즈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ethernaut 시리즈</h2>\n<ul>\n<li><a href=\"https://holyhansss.github.io/ethernaut/1_fallback_ethernaut/1_fallback_ethernaut/\">Ethernaut 1. Fallback</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/2_fallout_ethernaut/2_fallout_ethernaut/\">Ethernaut 2. Fallout</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/3_coinFilp_ethernaut/3_coinFlip_ethernaut/\">Ethernaut 3. CoinFlip</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/4_telephone_ethernaut/4_telephone_ethernaut/\">Ethernaut 4. Telephone</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/5_token_ethernaut/5_token_ethernaut/\">Ethernaut 5. Token</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/6_delegation_ethernaut/6_delegation_ethernaut/\">Ethernaut 6. Delegation</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/7_force_ethernaut/7_force_ethernaut/\">Ethernaut 7. Force</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/8_vault_ethernaut/8_vault_ethernaut/\">Ethernaut 8. Vault</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/9_king_ethernaut/9_king_ethernaut/\">Ethernaut 9. King</a></li>\n<li><a href=\"https://holyhansss.github.io/ethernaut/10_Re-entrancy_ethernaut/10_Re-entrancy_ethernaut/\">Ethernaut 10. Re-entrancy</a></li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%B7%A8%EC%95%BD%EC%A0%90-%EC%8B%9C%EB%A6%AC%EC%A6%88\">취약점 시리즈</a></li>\n<li><a href=\"#ethernaut-%EC%8B%9C%EB%A6%AC%EC%A6%88\">Ethernaut 시리즈</a></li>\n</ul>\n</div>","frontmatter":{"date":"January 14, 2022","title":"시리즈 별 정리(모든 글이 다 여기 정리되어 있어요!)","categories":"~feature~","author":"한성원","emoji":"🧢"},"fields":{"slug":"/allSeries/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://holyhansss.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/ethernaut/12_privacy_ethernaut/12_privacy_ethernaut/","nextSlug":"/allSeries/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}